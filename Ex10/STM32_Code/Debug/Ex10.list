
Ex10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001780  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800188c  0800188c  0001188c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080018b0  080018b0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080018b0  080018b0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080018b0  080018b0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080018b0  080018b0  000118b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080018b4  080018b4  000118b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080018b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  2000000c  080018c4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000038  080018c4  00020038  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003144  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ec5  00000000  00000000  00023179  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003f8  00000000  00000000  00024040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000370  00000000  00000000  00024438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000155b7  00000000  00000000  000247a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004a4e  00000000  00000000  00039d5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00079994  00000000  00000000  0003e7ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b8141  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000de4  00000000  00000000  000b8194  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001874 	.word	0x08001874

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001874 	.word	0x08001874

0800014c <setNumberOnClock>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void setNumberOnClock(int num){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b0b      	cmp	r3, #11
 8000158:	d867      	bhi.n	800022a <setNumberOnClock+0xde>
 800015a:	a201      	add	r2, pc, #4	; (adr r2, 8000160 <setNumberOnClock+0x14>)
 800015c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000160:	0800021d 	.word	0x0800021d
 8000164:	08000191 	.word	0x08000191
 8000168:	0800019d 	.word	0x0800019d
 800016c:	080001a9 	.word	0x080001a9
 8000170:	080001b5 	.word	0x080001b5
 8000174:	080001c1 	.word	0x080001c1
 8000178:	080001cd 	.word	0x080001cd
 800017c:	080001d9 	.word	0x080001d9
 8000180:	080001e5 	.word	0x080001e5
 8000184:	080001f3 	.word	0x080001f3
 8000188:	08000201 	.word	0x08000201
 800018c:	0800020f 	.word	0x0800020f
	switch(num){
	case 1:
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8000190:	2201      	movs	r2, #1
 8000192:	2102      	movs	r1, #2
 8000194:	4827      	ldr	r0, [pc, #156]	; (8000234 <setNumberOnClock+0xe8>)
 8000196:	f000 ff4d 	bl	8001034 <HAL_GPIO_WritePin>
		break;
 800019a:	e046      	b.n	800022a <setNumberOnClock+0xde>
	case 2:
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 800019c:	2201      	movs	r2, #1
 800019e:	2104      	movs	r1, #4
 80001a0:	4824      	ldr	r0, [pc, #144]	; (8000234 <setNumberOnClock+0xe8>)
 80001a2:	f000 ff47 	bl	8001034 <HAL_GPIO_WritePin>
		break;
 80001a6:	e040      	b.n	800022a <setNumberOnClock+0xde>
	case 3:
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 80001a8:	2201      	movs	r2, #1
 80001aa:	2108      	movs	r1, #8
 80001ac:	4821      	ldr	r0, [pc, #132]	; (8000234 <setNumberOnClock+0xe8>)
 80001ae:	f000 ff41 	bl	8001034 <HAL_GPIO_WritePin>
		break;
 80001b2:	e03a      	b.n	800022a <setNumberOnClock+0xde>
	case 4:
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 1);
 80001b4:	2201      	movs	r2, #1
 80001b6:	2110      	movs	r1, #16
 80001b8:	481e      	ldr	r0, [pc, #120]	; (8000234 <setNumberOnClock+0xe8>)
 80001ba:	f000 ff3b 	bl	8001034 <HAL_GPIO_WritePin>
		break;
 80001be:	e034      	b.n	800022a <setNumberOnClock+0xde>
	case 5:
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 1);
 80001c0:	2201      	movs	r2, #1
 80001c2:	2120      	movs	r1, #32
 80001c4:	481b      	ldr	r0, [pc, #108]	; (8000234 <setNumberOnClock+0xe8>)
 80001c6:	f000 ff35 	bl	8001034 <HAL_GPIO_WritePin>
		break;
 80001ca:	e02e      	b.n	800022a <setNumberOnClock+0xde>
	case 6:
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, 1);
 80001cc:	2201      	movs	r2, #1
 80001ce:	2140      	movs	r1, #64	; 0x40
 80001d0:	4818      	ldr	r0, [pc, #96]	; (8000234 <setNumberOnClock+0xe8>)
 80001d2:	f000 ff2f 	bl	8001034 <HAL_GPIO_WritePin>
		break;
 80001d6:	e028      	b.n	800022a <setNumberOnClock+0xde>
	case 7:
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, 1);
 80001d8:	2201      	movs	r2, #1
 80001da:	2180      	movs	r1, #128	; 0x80
 80001dc:	4815      	ldr	r0, [pc, #84]	; (8000234 <setNumberOnClock+0xe8>)
 80001de:	f000 ff29 	bl	8001034 <HAL_GPIO_WritePin>
		break;
 80001e2:	e022      	b.n	800022a <setNumberOnClock+0xde>
	case 8:
		HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, 1);
 80001e4:	2201      	movs	r2, #1
 80001e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001ea:	4812      	ldr	r0, [pc, #72]	; (8000234 <setNumberOnClock+0xe8>)
 80001ec:	f000 ff22 	bl	8001034 <HAL_GPIO_WritePin>
		break;
 80001f0:	e01b      	b.n	800022a <setNumberOnClock+0xde>
	case 9:
		HAL_GPIO_WritePin(LED9_GPIO_Port, LED9_Pin, 1);
 80001f2:	2201      	movs	r2, #1
 80001f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001f8:	480e      	ldr	r0, [pc, #56]	; (8000234 <setNumberOnClock+0xe8>)
 80001fa:	f000 ff1b 	bl	8001034 <HAL_GPIO_WritePin>
		break;
 80001fe:	e014      	b.n	800022a <setNumberOnClock+0xde>
	case 10:
		HAL_GPIO_WritePin(LED10_GPIO_Port, LED10_Pin, 1);
 8000200:	2201      	movs	r2, #1
 8000202:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000206:	480b      	ldr	r0, [pc, #44]	; (8000234 <setNumberOnClock+0xe8>)
 8000208:	f000 ff14 	bl	8001034 <HAL_GPIO_WritePin>
		break;
 800020c:	e00d      	b.n	800022a <setNumberOnClock+0xde>
	case 11:
		HAL_GPIO_WritePin(LED11_GPIO_Port, LED11_Pin, 1);
 800020e:	2201      	movs	r2, #1
 8000210:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000214:	4807      	ldr	r0, [pc, #28]	; (8000234 <setNumberOnClock+0xe8>)
 8000216:	f000 ff0d 	bl	8001034 <HAL_GPIO_WritePin>
		break;
 800021a:	e006      	b.n	800022a <setNumberOnClock+0xde>
	case 0:
		HAL_GPIO_WritePin(LED12_GPIO_Port, LED12_Pin, 1);
 800021c:	2201      	movs	r2, #1
 800021e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000222:	4804      	ldr	r0, [pc, #16]	; (8000234 <setNumberOnClock+0xe8>)
 8000224:	f000 ff06 	bl	8001034 <HAL_GPIO_WritePin>
		break;
 8000228:	bf00      	nop
	}
}
 800022a:	bf00      	nop
 800022c:	3708      	adds	r7, #8
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	40010800 	.word	0x40010800

08000238 <sigleLed_on>:
void sigleLed_on(int numLed){
 8000238:	b580      	push	{r7, lr}
 800023a:	b08e      	sub	sp, #56	; 0x38
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
	int a=0, b=0, c=0, d=0, e=0, f=0, g=0, i=0, k=0, l=0, m=0, n=0;
 8000240:	2300      	movs	r3, #0
 8000242:	637b      	str	r3, [r7, #52]	; 0x34
 8000244:	2300      	movs	r3, #0
 8000246:	633b      	str	r3, [r7, #48]	; 0x30
 8000248:	2300      	movs	r3, #0
 800024a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800024c:	2300      	movs	r3, #0
 800024e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000250:	2300      	movs	r3, #0
 8000252:	627b      	str	r3, [r7, #36]	; 0x24
 8000254:	2300      	movs	r3, #0
 8000256:	623b      	str	r3, [r7, #32]
 8000258:	2300      	movs	r3, #0
 800025a:	61fb      	str	r3, [r7, #28]
 800025c:	2300      	movs	r3, #0
 800025e:	61bb      	str	r3, [r7, #24]
 8000260:	2300      	movs	r3, #0
 8000262:	617b      	str	r3, [r7, #20]
 8000264:	2300      	movs	r3, #0
 8000266:	613b      	str	r3, [r7, #16]
 8000268:	2300      	movs	r3, #0
 800026a:	60fb      	str	r3, [r7, #12]
 800026c:	2300      	movs	r3, #0
 800026e:	60bb      	str	r3, [r7, #8]
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	3b01      	subs	r3, #1
 8000274:	2b0b      	cmp	r3, #11
 8000276:	f200 8147 	bhi.w	8000508 <sigleLed_on+0x2d0>
 800027a:	a201      	add	r2, pc, #4	; (adr r2, 8000280 <sigleLed_on+0x48>)
 800027c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000280:	080002b1 	.word	0x080002b1
 8000284:	080002e3 	.word	0x080002e3
 8000288:	08000315 	.word	0x08000315
 800028c:	08000347 	.word	0x08000347
 8000290:	08000379 	.word	0x08000379
 8000294:	080003ab 	.word	0x080003ab
 8000298:	080003dd 	.word	0x080003dd
 800029c:	0800040f 	.word	0x0800040f
 80002a0:	08000441 	.word	0x08000441
 80002a4:	08000473 	.word	0x08000473
 80002a8:	080004a5 	.word	0x080004a5
 80002ac:	080004d7 	.word	0x080004d7
	switch(numLed){
	case 1:
		a=1; b=0; c=0; d=0; e=0; f=0; g=0; i=0; k=0; l=0; m=0; n=0;
 80002b0:	2301      	movs	r3, #1
 80002b2:	637b      	str	r3, [r7, #52]	; 0x34
 80002b4:	2300      	movs	r3, #0
 80002b6:	633b      	str	r3, [r7, #48]	; 0x30
 80002b8:	2300      	movs	r3, #0
 80002ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80002bc:	2300      	movs	r3, #0
 80002be:	62bb      	str	r3, [r7, #40]	; 0x28
 80002c0:	2300      	movs	r3, #0
 80002c2:	627b      	str	r3, [r7, #36]	; 0x24
 80002c4:	2300      	movs	r3, #0
 80002c6:	623b      	str	r3, [r7, #32]
 80002c8:	2300      	movs	r3, #0
 80002ca:	61fb      	str	r3, [r7, #28]
 80002cc:	2300      	movs	r3, #0
 80002ce:	61bb      	str	r3, [r7, #24]
 80002d0:	2300      	movs	r3, #0
 80002d2:	617b      	str	r3, [r7, #20]
 80002d4:	2300      	movs	r3, #0
 80002d6:	613b      	str	r3, [r7, #16]
 80002d8:	2300      	movs	r3, #0
 80002da:	60fb      	str	r3, [r7, #12]
 80002dc:	2300      	movs	r3, #0
 80002de:	60bb      	str	r3, [r7, #8]
		break;
 80002e0:	e112      	b.n	8000508 <sigleLed_on+0x2d0>
	case 2:
		a=0; b=1; c=0; d=0; e=0; f=0; g=0; i=0; k=0; l=0; m=0; n=0;
 80002e2:	2300      	movs	r3, #0
 80002e4:	637b      	str	r3, [r7, #52]	; 0x34
 80002e6:	2301      	movs	r3, #1
 80002e8:	633b      	str	r3, [r7, #48]	; 0x30
 80002ea:	2300      	movs	r3, #0
 80002ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80002ee:	2300      	movs	r3, #0
 80002f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80002f2:	2300      	movs	r3, #0
 80002f4:	627b      	str	r3, [r7, #36]	; 0x24
 80002f6:	2300      	movs	r3, #0
 80002f8:	623b      	str	r3, [r7, #32]
 80002fa:	2300      	movs	r3, #0
 80002fc:	61fb      	str	r3, [r7, #28]
 80002fe:	2300      	movs	r3, #0
 8000300:	61bb      	str	r3, [r7, #24]
 8000302:	2300      	movs	r3, #0
 8000304:	617b      	str	r3, [r7, #20]
 8000306:	2300      	movs	r3, #0
 8000308:	613b      	str	r3, [r7, #16]
 800030a:	2300      	movs	r3, #0
 800030c:	60fb      	str	r3, [r7, #12]
 800030e:	2300      	movs	r3, #0
 8000310:	60bb      	str	r3, [r7, #8]
		break;
 8000312:	e0f9      	b.n	8000508 <sigleLed_on+0x2d0>
	case 3:
		a=0; b=0; c=1; d=0; e=0; f=0; g=0; i=0; k=0; l=0; m=0; n=0;
 8000314:	2300      	movs	r3, #0
 8000316:	637b      	str	r3, [r7, #52]	; 0x34
 8000318:	2300      	movs	r3, #0
 800031a:	633b      	str	r3, [r7, #48]	; 0x30
 800031c:	2301      	movs	r3, #1
 800031e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000320:	2300      	movs	r3, #0
 8000322:	62bb      	str	r3, [r7, #40]	; 0x28
 8000324:	2300      	movs	r3, #0
 8000326:	627b      	str	r3, [r7, #36]	; 0x24
 8000328:	2300      	movs	r3, #0
 800032a:	623b      	str	r3, [r7, #32]
 800032c:	2300      	movs	r3, #0
 800032e:	61fb      	str	r3, [r7, #28]
 8000330:	2300      	movs	r3, #0
 8000332:	61bb      	str	r3, [r7, #24]
 8000334:	2300      	movs	r3, #0
 8000336:	617b      	str	r3, [r7, #20]
 8000338:	2300      	movs	r3, #0
 800033a:	613b      	str	r3, [r7, #16]
 800033c:	2300      	movs	r3, #0
 800033e:	60fb      	str	r3, [r7, #12]
 8000340:	2300      	movs	r3, #0
 8000342:	60bb      	str	r3, [r7, #8]
		break;
 8000344:	e0e0      	b.n	8000508 <sigleLed_on+0x2d0>
	case 4:
		a=0; b=0; c=0; d=1; e=0; f=0; g=0; i=0; k=0; l=0; m=0; n=0;
 8000346:	2300      	movs	r3, #0
 8000348:	637b      	str	r3, [r7, #52]	; 0x34
 800034a:	2300      	movs	r3, #0
 800034c:	633b      	str	r3, [r7, #48]	; 0x30
 800034e:	2300      	movs	r3, #0
 8000350:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000352:	2301      	movs	r3, #1
 8000354:	62bb      	str	r3, [r7, #40]	; 0x28
 8000356:	2300      	movs	r3, #0
 8000358:	627b      	str	r3, [r7, #36]	; 0x24
 800035a:	2300      	movs	r3, #0
 800035c:	623b      	str	r3, [r7, #32]
 800035e:	2300      	movs	r3, #0
 8000360:	61fb      	str	r3, [r7, #28]
 8000362:	2300      	movs	r3, #0
 8000364:	61bb      	str	r3, [r7, #24]
 8000366:	2300      	movs	r3, #0
 8000368:	617b      	str	r3, [r7, #20]
 800036a:	2300      	movs	r3, #0
 800036c:	613b      	str	r3, [r7, #16]
 800036e:	2300      	movs	r3, #0
 8000370:	60fb      	str	r3, [r7, #12]
 8000372:	2300      	movs	r3, #0
 8000374:	60bb      	str	r3, [r7, #8]
		break;
 8000376:	e0c7      	b.n	8000508 <sigleLed_on+0x2d0>
	case 5:
		a=0; b=0; c=0; d=0; e=1; f=0; g=0; i=0; k=0; l=0; m=0; n=0;
 8000378:	2300      	movs	r3, #0
 800037a:	637b      	str	r3, [r7, #52]	; 0x34
 800037c:	2300      	movs	r3, #0
 800037e:	633b      	str	r3, [r7, #48]	; 0x30
 8000380:	2300      	movs	r3, #0
 8000382:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000384:	2300      	movs	r3, #0
 8000386:	62bb      	str	r3, [r7, #40]	; 0x28
 8000388:	2301      	movs	r3, #1
 800038a:	627b      	str	r3, [r7, #36]	; 0x24
 800038c:	2300      	movs	r3, #0
 800038e:	623b      	str	r3, [r7, #32]
 8000390:	2300      	movs	r3, #0
 8000392:	61fb      	str	r3, [r7, #28]
 8000394:	2300      	movs	r3, #0
 8000396:	61bb      	str	r3, [r7, #24]
 8000398:	2300      	movs	r3, #0
 800039a:	617b      	str	r3, [r7, #20]
 800039c:	2300      	movs	r3, #0
 800039e:	613b      	str	r3, [r7, #16]
 80003a0:	2300      	movs	r3, #0
 80003a2:	60fb      	str	r3, [r7, #12]
 80003a4:	2300      	movs	r3, #0
 80003a6:	60bb      	str	r3, [r7, #8]
		break;
 80003a8:	e0ae      	b.n	8000508 <sigleLed_on+0x2d0>
	case 6:
		a=0; b=0; c=0; d=0; e=0; f=1; g=0; i=0; k=0; l=0; m=0; n=0;
 80003aa:	2300      	movs	r3, #0
 80003ac:	637b      	str	r3, [r7, #52]	; 0x34
 80003ae:	2300      	movs	r3, #0
 80003b0:	633b      	str	r3, [r7, #48]	; 0x30
 80003b2:	2300      	movs	r3, #0
 80003b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80003b6:	2300      	movs	r3, #0
 80003b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80003ba:	2300      	movs	r3, #0
 80003bc:	627b      	str	r3, [r7, #36]	; 0x24
 80003be:	2301      	movs	r3, #1
 80003c0:	623b      	str	r3, [r7, #32]
 80003c2:	2300      	movs	r3, #0
 80003c4:	61fb      	str	r3, [r7, #28]
 80003c6:	2300      	movs	r3, #0
 80003c8:	61bb      	str	r3, [r7, #24]
 80003ca:	2300      	movs	r3, #0
 80003cc:	617b      	str	r3, [r7, #20]
 80003ce:	2300      	movs	r3, #0
 80003d0:	613b      	str	r3, [r7, #16]
 80003d2:	2300      	movs	r3, #0
 80003d4:	60fb      	str	r3, [r7, #12]
 80003d6:	2300      	movs	r3, #0
 80003d8:	60bb      	str	r3, [r7, #8]
		break;
 80003da:	e095      	b.n	8000508 <sigleLed_on+0x2d0>
	case 7:
		a=0; b=0; c=0; d=0; e=0; f=0; g=1; i=0; k=0; l=0; m=0; n=0;
 80003dc:	2300      	movs	r3, #0
 80003de:	637b      	str	r3, [r7, #52]	; 0x34
 80003e0:	2300      	movs	r3, #0
 80003e2:	633b      	str	r3, [r7, #48]	; 0x30
 80003e4:	2300      	movs	r3, #0
 80003e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80003e8:	2300      	movs	r3, #0
 80003ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80003ec:	2300      	movs	r3, #0
 80003ee:	627b      	str	r3, [r7, #36]	; 0x24
 80003f0:	2300      	movs	r3, #0
 80003f2:	623b      	str	r3, [r7, #32]
 80003f4:	2301      	movs	r3, #1
 80003f6:	61fb      	str	r3, [r7, #28]
 80003f8:	2300      	movs	r3, #0
 80003fa:	61bb      	str	r3, [r7, #24]
 80003fc:	2300      	movs	r3, #0
 80003fe:	617b      	str	r3, [r7, #20]
 8000400:	2300      	movs	r3, #0
 8000402:	613b      	str	r3, [r7, #16]
 8000404:	2300      	movs	r3, #0
 8000406:	60fb      	str	r3, [r7, #12]
 8000408:	2300      	movs	r3, #0
 800040a:	60bb      	str	r3, [r7, #8]
		break;
 800040c:	e07c      	b.n	8000508 <sigleLed_on+0x2d0>
	case 8:
		a=0; b=0; c=0; d=0; e=0; f=0; g=0; i=1; k=0; l=0; m=0; n=0;
 800040e:	2300      	movs	r3, #0
 8000410:	637b      	str	r3, [r7, #52]	; 0x34
 8000412:	2300      	movs	r3, #0
 8000414:	633b      	str	r3, [r7, #48]	; 0x30
 8000416:	2300      	movs	r3, #0
 8000418:	62fb      	str	r3, [r7, #44]	; 0x2c
 800041a:	2300      	movs	r3, #0
 800041c:	62bb      	str	r3, [r7, #40]	; 0x28
 800041e:	2300      	movs	r3, #0
 8000420:	627b      	str	r3, [r7, #36]	; 0x24
 8000422:	2300      	movs	r3, #0
 8000424:	623b      	str	r3, [r7, #32]
 8000426:	2300      	movs	r3, #0
 8000428:	61fb      	str	r3, [r7, #28]
 800042a:	2301      	movs	r3, #1
 800042c:	61bb      	str	r3, [r7, #24]
 800042e:	2300      	movs	r3, #0
 8000430:	617b      	str	r3, [r7, #20]
 8000432:	2300      	movs	r3, #0
 8000434:	613b      	str	r3, [r7, #16]
 8000436:	2300      	movs	r3, #0
 8000438:	60fb      	str	r3, [r7, #12]
 800043a:	2300      	movs	r3, #0
 800043c:	60bb      	str	r3, [r7, #8]
		break;
 800043e:	e063      	b.n	8000508 <sigleLed_on+0x2d0>
	case 9:
		a=0; b=0; c=0; d=0; e=0; f=0; g=0; i=0; k=1; l=0; m=0; n=0;
 8000440:	2300      	movs	r3, #0
 8000442:	637b      	str	r3, [r7, #52]	; 0x34
 8000444:	2300      	movs	r3, #0
 8000446:	633b      	str	r3, [r7, #48]	; 0x30
 8000448:	2300      	movs	r3, #0
 800044a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800044c:	2300      	movs	r3, #0
 800044e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000450:	2300      	movs	r3, #0
 8000452:	627b      	str	r3, [r7, #36]	; 0x24
 8000454:	2300      	movs	r3, #0
 8000456:	623b      	str	r3, [r7, #32]
 8000458:	2300      	movs	r3, #0
 800045a:	61fb      	str	r3, [r7, #28]
 800045c:	2300      	movs	r3, #0
 800045e:	61bb      	str	r3, [r7, #24]
 8000460:	2301      	movs	r3, #1
 8000462:	617b      	str	r3, [r7, #20]
 8000464:	2300      	movs	r3, #0
 8000466:	613b      	str	r3, [r7, #16]
 8000468:	2300      	movs	r3, #0
 800046a:	60fb      	str	r3, [r7, #12]
 800046c:	2300      	movs	r3, #0
 800046e:	60bb      	str	r3, [r7, #8]
		break;
 8000470:	e04a      	b.n	8000508 <sigleLed_on+0x2d0>
	case 10:
		a=0; b=0; c=0; d=0; e=0; f=0; g=0; i=0; k=0; l=1; m=0; n=0;
 8000472:	2300      	movs	r3, #0
 8000474:	637b      	str	r3, [r7, #52]	; 0x34
 8000476:	2300      	movs	r3, #0
 8000478:	633b      	str	r3, [r7, #48]	; 0x30
 800047a:	2300      	movs	r3, #0
 800047c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800047e:	2300      	movs	r3, #0
 8000480:	62bb      	str	r3, [r7, #40]	; 0x28
 8000482:	2300      	movs	r3, #0
 8000484:	627b      	str	r3, [r7, #36]	; 0x24
 8000486:	2300      	movs	r3, #0
 8000488:	623b      	str	r3, [r7, #32]
 800048a:	2300      	movs	r3, #0
 800048c:	61fb      	str	r3, [r7, #28]
 800048e:	2300      	movs	r3, #0
 8000490:	61bb      	str	r3, [r7, #24]
 8000492:	2300      	movs	r3, #0
 8000494:	617b      	str	r3, [r7, #20]
 8000496:	2301      	movs	r3, #1
 8000498:	613b      	str	r3, [r7, #16]
 800049a:	2300      	movs	r3, #0
 800049c:	60fb      	str	r3, [r7, #12]
 800049e:	2300      	movs	r3, #0
 80004a0:	60bb      	str	r3, [r7, #8]
		break;
 80004a2:	e031      	b.n	8000508 <sigleLed_on+0x2d0>
	case 11:
		a=0; b=0; c=0; d=0; e=0; f=0; g=0; i=0; k=0; l=0; m=1; n=0;
 80004a4:	2300      	movs	r3, #0
 80004a6:	637b      	str	r3, [r7, #52]	; 0x34
 80004a8:	2300      	movs	r3, #0
 80004aa:	633b      	str	r3, [r7, #48]	; 0x30
 80004ac:	2300      	movs	r3, #0
 80004ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80004b0:	2300      	movs	r3, #0
 80004b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80004b4:	2300      	movs	r3, #0
 80004b6:	627b      	str	r3, [r7, #36]	; 0x24
 80004b8:	2300      	movs	r3, #0
 80004ba:	623b      	str	r3, [r7, #32]
 80004bc:	2300      	movs	r3, #0
 80004be:	61fb      	str	r3, [r7, #28]
 80004c0:	2300      	movs	r3, #0
 80004c2:	61bb      	str	r3, [r7, #24]
 80004c4:	2300      	movs	r3, #0
 80004c6:	617b      	str	r3, [r7, #20]
 80004c8:	2300      	movs	r3, #0
 80004ca:	613b      	str	r3, [r7, #16]
 80004cc:	2301      	movs	r3, #1
 80004ce:	60fb      	str	r3, [r7, #12]
 80004d0:	2300      	movs	r3, #0
 80004d2:	60bb      	str	r3, [r7, #8]
		break;
 80004d4:	e018      	b.n	8000508 <sigleLed_on+0x2d0>
	case 12:
		a=0; b=0; c=0; d=0; e=0; f=0; g=0; i=0; k=0; l=0; m=0; n=1;
 80004d6:	2300      	movs	r3, #0
 80004d8:	637b      	str	r3, [r7, #52]	; 0x34
 80004da:	2300      	movs	r3, #0
 80004dc:	633b      	str	r3, [r7, #48]	; 0x30
 80004de:	2300      	movs	r3, #0
 80004e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80004e2:	2300      	movs	r3, #0
 80004e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80004e6:	2300      	movs	r3, #0
 80004e8:	627b      	str	r3, [r7, #36]	; 0x24
 80004ea:	2300      	movs	r3, #0
 80004ec:	623b      	str	r3, [r7, #32]
 80004ee:	2300      	movs	r3, #0
 80004f0:	61fb      	str	r3, [r7, #28]
 80004f2:	2300      	movs	r3, #0
 80004f4:	61bb      	str	r3, [r7, #24]
 80004f6:	2300      	movs	r3, #0
 80004f8:	617b      	str	r3, [r7, #20]
 80004fa:	2300      	movs	r3, #0
 80004fc:	613b      	str	r3, [r7, #16]
 80004fe:	2300      	movs	r3, #0
 8000500:	60fb      	str	r3, [r7, #12]
 8000502:	2301      	movs	r3, #1
 8000504:	60bb      	str	r3, [r7, #8]
		break;
 8000506:	bf00      	nop
	}
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, a);
 8000508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800050a:	b2db      	uxtb	r3, r3
 800050c:	461a      	mov	r2, r3
 800050e:	2102      	movs	r1, #2
 8000510:	482c      	ldr	r0, [pc, #176]	; (80005c4 <sigleLed_on+0x38c>)
 8000512:	f000 fd8f 	bl	8001034 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, b);
 8000516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000518:	b2db      	uxtb	r3, r3
 800051a:	461a      	mov	r2, r3
 800051c:	2104      	movs	r1, #4
 800051e:	4829      	ldr	r0, [pc, #164]	; (80005c4 <sigleLed_on+0x38c>)
 8000520:	f000 fd88 	bl	8001034 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, c);
 8000524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000526:	b2db      	uxtb	r3, r3
 8000528:	461a      	mov	r2, r3
 800052a:	2108      	movs	r1, #8
 800052c:	4825      	ldr	r0, [pc, #148]	; (80005c4 <sigleLed_on+0x38c>)
 800052e:	f000 fd81 	bl	8001034 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, d);
 8000532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000534:	b2db      	uxtb	r3, r3
 8000536:	461a      	mov	r2, r3
 8000538:	2110      	movs	r1, #16
 800053a:	4822      	ldr	r0, [pc, #136]	; (80005c4 <sigleLed_on+0x38c>)
 800053c:	f000 fd7a 	bl	8001034 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, e);
 8000540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000542:	b2db      	uxtb	r3, r3
 8000544:	461a      	mov	r2, r3
 8000546:	2120      	movs	r1, #32
 8000548:	481e      	ldr	r0, [pc, #120]	; (80005c4 <sigleLed_on+0x38c>)
 800054a:	f000 fd73 	bl	8001034 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, f);
 800054e:	6a3b      	ldr	r3, [r7, #32]
 8000550:	b2db      	uxtb	r3, r3
 8000552:	461a      	mov	r2, r3
 8000554:	2140      	movs	r1, #64	; 0x40
 8000556:	481b      	ldr	r0, [pc, #108]	; (80005c4 <sigleLed_on+0x38c>)
 8000558:	f000 fd6c 	bl	8001034 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, g);
 800055c:	69fb      	ldr	r3, [r7, #28]
 800055e:	b2db      	uxtb	r3, r3
 8000560:	461a      	mov	r2, r3
 8000562:	2180      	movs	r1, #128	; 0x80
 8000564:	4817      	ldr	r0, [pc, #92]	; (80005c4 <sigleLed_on+0x38c>)
 8000566:	f000 fd65 	bl	8001034 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, i);
 800056a:	69bb      	ldr	r3, [r7, #24]
 800056c:	b2db      	uxtb	r3, r3
 800056e:	461a      	mov	r2, r3
 8000570:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000574:	4813      	ldr	r0, [pc, #76]	; (80005c4 <sigleLed_on+0x38c>)
 8000576:	f000 fd5d 	bl	8001034 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED9_GPIO_Port, LED9_Pin, k);
 800057a:	697b      	ldr	r3, [r7, #20]
 800057c:	b2db      	uxtb	r3, r3
 800057e:	461a      	mov	r2, r3
 8000580:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000584:	480f      	ldr	r0, [pc, #60]	; (80005c4 <sigleLed_on+0x38c>)
 8000586:	f000 fd55 	bl	8001034 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED10_GPIO_Port, LED10_Pin, l);
 800058a:	693b      	ldr	r3, [r7, #16]
 800058c:	b2db      	uxtb	r3, r3
 800058e:	461a      	mov	r2, r3
 8000590:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000594:	480b      	ldr	r0, [pc, #44]	; (80005c4 <sigleLed_on+0x38c>)
 8000596:	f000 fd4d 	bl	8001034 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED11_GPIO_Port, LED11_Pin, m);
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	b2db      	uxtb	r3, r3
 800059e:	461a      	mov	r2, r3
 80005a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005a4:	4807      	ldr	r0, [pc, #28]	; (80005c4 <sigleLed_on+0x38c>)
 80005a6:	f000 fd45 	bl	8001034 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED12_GPIO_Port, LED12_Pin, n);
 80005aa:	68bb      	ldr	r3, [r7, #8]
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	461a      	mov	r2, r3
 80005b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005b4:	4803      	ldr	r0, [pc, #12]	; (80005c4 <sigleLed_on+0x38c>)
 80005b6:	f000 fd3d 	bl	8001034 <HAL_GPIO_WritePin>
}
 80005ba:	bf00      	nop
 80005bc:	3738      	adds	r7, #56	; 0x38
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40010800 	.word	0x40010800

080005c8 <tsecond>:
void tsecond(int counter){
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	if(counter<1){
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	dc03      	bgt.n	80005de <tsecond+0x16>
		sigleLed_on(12);
 80005d6:	200c      	movs	r0, #12
 80005d8:	f7ff fe2e 	bl	8000238 <sigleLed_on>
		sigleLed_on(10);
	}
	else if(counter<12){
		sigleLed_on(11);
	}
}
 80005dc:	e04b      	b.n	8000676 <tsecond+0xae>
	else if(counter<2){
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	dc03      	bgt.n	80005ec <tsecond+0x24>
		sigleLed_on(1);
 80005e4:	2001      	movs	r0, #1
 80005e6:	f7ff fe27 	bl	8000238 <sigleLed_on>
}
 80005ea:	e044      	b.n	8000676 <tsecond+0xae>
	else if(counter<3){
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2b02      	cmp	r3, #2
 80005f0:	dc03      	bgt.n	80005fa <tsecond+0x32>
		sigleLed_on(2);
 80005f2:	2002      	movs	r0, #2
 80005f4:	f7ff fe20 	bl	8000238 <sigleLed_on>
}
 80005f8:	e03d      	b.n	8000676 <tsecond+0xae>
	else if(counter<4){
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2b03      	cmp	r3, #3
 80005fe:	dc03      	bgt.n	8000608 <tsecond+0x40>
		sigleLed_on(3);
 8000600:	2003      	movs	r0, #3
 8000602:	f7ff fe19 	bl	8000238 <sigleLed_on>
}
 8000606:	e036      	b.n	8000676 <tsecond+0xae>
	else if(counter<5){
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2b04      	cmp	r3, #4
 800060c:	dc03      	bgt.n	8000616 <tsecond+0x4e>
		sigleLed_on(4);
 800060e:	2004      	movs	r0, #4
 8000610:	f7ff fe12 	bl	8000238 <sigleLed_on>
}
 8000614:	e02f      	b.n	8000676 <tsecond+0xae>
	else if(counter<6){
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	2b05      	cmp	r3, #5
 800061a:	dc03      	bgt.n	8000624 <tsecond+0x5c>
		sigleLed_on(5);
 800061c:	2005      	movs	r0, #5
 800061e:	f7ff fe0b 	bl	8000238 <sigleLed_on>
}
 8000622:	e028      	b.n	8000676 <tsecond+0xae>
	else if(counter<7){
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2b06      	cmp	r3, #6
 8000628:	dc03      	bgt.n	8000632 <tsecond+0x6a>
		sigleLed_on(6);
 800062a:	2006      	movs	r0, #6
 800062c:	f7ff fe04 	bl	8000238 <sigleLed_on>
}
 8000630:	e021      	b.n	8000676 <tsecond+0xae>
	else if(counter<8){
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	2b07      	cmp	r3, #7
 8000636:	dc03      	bgt.n	8000640 <tsecond+0x78>
		sigleLed_on(7);
 8000638:	2007      	movs	r0, #7
 800063a:	f7ff fdfd 	bl	8000238 <sigleLed_on>
}
 800063e:	e01a      	b.n	8000676 <tsecond+0xae>
	else if(counter<9){
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	2b08      	cmp	r3, #8
 8000644:	dc03      	bgt.n	800064e <tsecond+0x86>
		sigleLed_on(8);
 8000646:	2008      	movs	r0, #8
 8000648:	f7ff fdf6 	bl	8000238 <sigleLed_on>
}
 800064c:	e013      	b.n	8000676 <tsecond+0xae>
	else if(counter<10){
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	2b09      	cmp	r3, #9
 8000652:	dc03      	bgt.n	800065c <tsecond+0x94>
		sigleLed_on(9);
 8000654:	2009      	movs	r0, #9
 8000656:	f7ff fdef 	bl	8000238 <sigleLed_on>
}
 800065a:	e00c      	b.n	8000676 <tsecond+0xae>
	else if(counter<11){
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	2b0a      	cmp	r3, #10
 8000660:	dc03      	bgt.n	800066a <tsecond+0xa2>
		sigleLed_on(10);
 8000662:	200a      	movs	r0, #10
 8000664:	f7ff fde8 	bl	8000238 <sigleLed_on>
}
 8000668:	e005      	b.n	8000676 <tsecond+0xae>
	else if(counter<12){
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	2b0b      	cmp	r3, #11
 800066e:	dc02      	bgt.n	8000676 <tsecond+0xae>
		sigleLed_on(11);
 8000670:	200b      	movs	r0, #11
 8000672:	f7ff fde1 	bl	8000238 <sigleLed_on>
}
 8000676:	bf00      	nop
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}

0800067e <thour>:
void thour(int counter){
 800067e:	b580      	push	{r7, lr}
 8000680:	b082      	sub	sp, #8
 8000682:	af00      	add	r7, sp, #0
 8000684:	6078      	str	r0, [r7, #4]
	if(counter<1 ){
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	2b00      	cmp	r3, #0
 800068a:	dc03      	bgt.n	8000694 <thour+0x16>
		setNumberOnClock(0);
 800068c:	2000      	movs	r0, #0
 800068e:	f7ff fd5d 	bl	800014c <setNumberOnClock>
		setNumberOnClock(10);
	  }
	else if(counter<12){
		setNumberOnClock(11);
	  }
}
 8000692:	e04b      	b.n	800072c <thour+0xae>
	else if(counter<2){
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	2b01      	cmp	r3, #1
 8000698:	dc03      	bgt.n	80006a2 <thour+0x24>
		setNumberOnClock(1);
 800069a:	2001      	movs	r0, #1
 800069c:	f7ff fd56 	bl	800014c <setNumberOnClock>
}
 80006a0:	e044      	b.n	800072c <thour+0xae>
	else if(counter<3){
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2b02      	cmp	r3, #2
 80006a6:	dc03      	bgt.n	80006b0 <thour+0x32>
		setNumberOnClock(2);
 80006a8:	2002      	movs	r0, #2
 80006aa:	f7ff fd4f 	bl	800014c <setNumberOnClock>
}
 80006ae:	e03d      	b.n	800072c <thour+0xae>
	else if(counter<4){
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	2b03      	cmp	r3, #3
 80006b4:	dc03      	bgt.n	80006be <thour+0x40>
		setNumberOnClock(3);
 80006b6:	2003      	movs	r0, #3
 80006b8:	f7ff fd48 	bl	800014c <setNumberOnClock>
}
 80006bc:	e036      	b.n	800072c <thour+0xae>
	else if(counter<5){
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	2b04      	cmp	r3, #4
 80006c2:	dc03      	bgt.n	80006cc <thour+0x4e>
		setNumberOnClock(4);
 80006c4:	2004      	movs	r0, #4
 80006c6:	f7ff fd41 	bl	800014c <setNumberOnClock>
}
 80006ca:	e02f      	b.n	800072c <thour+0xae>
	else if(counter<6){
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2b05      	cmp	r3, #5
 80006d0:	dc03      	bgt.n	80006da <thour+0x5c>
		setNumberOnClock(5);
 80006d2:	2005      	movs	r0, #5
 80006d4:	f7ff fd3a 	bl	800014c <setNumberOnClock>
}
 80006d8:	e028      	b.n	800072c <thour+0xae>
	else if(counter<7){
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	2b06      	cmp	r3, #6
 80006de:	dc03      	bgt.n	80006e8 <thour+0x6a>
		setNumberOnClock(6);
 80006e0:	2006      	movs	r0, #6
 80006e2:	f7ff fd33 	bl	800014c <setNumberOnClock>
}
 80006e6:	e021      	b.n	800072c <thour+0xae>
	else if(counter<8){
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2b07      	cmp	r3, #7
 80006ec:	dc03      	bgt.n	80006f6 <thour+0x78>
		setNumberOnClock(7);
 80006ee:	2007      	movs	r0, #7
 80006f0:	f7ff fd2c 	bl	800014c <setNumberOnClock>
}
 80006f4:	e01a      	b.n	800072c <thour+0xae>
	else if(counter<9){
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	2b08      	cmp	r3, #8
 80006fa:	dc03      	bgt.n	8000704 <thour+0x86>
		setNumberOnClock(8);
 80006fc:	2008      	movs	r0, #8
 80006fe:	f7ff fd25 	bl	800014c <setNumberOnClock>
}
 8000702:	e013      	b.n	800072c <thour+0xae>
	else if(counter<10){
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	2b09      	cmp	r3, #9
 8000708:	dc03      	bgt.n	8000712 <thour+0x94>
		setNumberOnClock(9);
 800070a:	2009      	movs	r0, #9
 800070c:	f7ff fd1e 	bl	800014c <setNumberOnClock>
}
 8000710:	e00c      	b.n	800072c <thour+0xae>
	else if(counter<11){
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2b0a      	cmp	r3, #10
 8000716:	dc03      	bgt.n	8000720 <thour+0xa2>
		setNumberOnClock(10);
 8000718:	200a      	movs	r0, #10
 800071a:	f7ff fd17 	bl	800014c <setNumberOnClock>
}
 800071e:	e005      	b.n	800072c <thour+0xae>
	else if(counter<12){
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	2b0b      	cmp	r3, #11
 8000724:	dc02      	bgt.n	800072c <thour+0xae>
		setNumberOnClock(11);
 8000726:	200b      	movs	r0, #11
 8000728:	f7ff fd10 	bl	800014c <setNumberOnClock>
}
 800072c:	bf00      	nop
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <tmin>:
void tmin(int counter){
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
	if(counter<5 ){
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	2b04      	cmp	r3, #4
 8000740:	dc03      	bgt.n	800074a <tmin+0x16>
		setNumberOnClock(0);
 8000742:	2000      	movs	r0, #0
 8000744:	f7ff fd02 	bl	800014c <setNumberOnClock>
		setNumberOnClock(10);
	  }
	else if(counter<60){
		setNumberOnClock(11);
	  }
}
 8000748:	e04b      	b.n	80007e2 <tmin+0xae>
	else if(counter<10){
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	2b09      	cmp	r3, #9
 800074e:	dc03      	bgt.n	8000758 <tmin+0x24>
		setNumberOnClock(1);
 8000750:	2001      	movs	r0, #1
 8000752:	f7ff fcfb 	bl	800014c <setNumberOnClock>
}
 8000756:	e044      	b.n	80007e2 <tmin+0xae>
	else if(counter<15){
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	2b0e      	cmp	r3, #14
 800075c:	dc03      	bgt.n	8000766 <tmin+0x32>
		setNumberOnClock(2);
 800075e:	2002      	movs	r0, #2
 8000760:	f7ff fcf4 	bl	800014c <setNumberOnClock>
}
 8000764:	e03d      	b.n	80007e2 <tmin+0xae>
	else if(counter<20){
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	2b13      	cmp	r3, #19
 800076a:	dc03      	bgt.n	8000774 <tmin+0x40>
		setNumberOnClock(3);
 800076c:	2003      	movs	r0, #3
 800076e:	f7ff fced 	bl	800014c <setNumberOnClock>
}
 8000772:	e036      	b.n	80007e2 <tmin+0xae>
	else if(counter<25){
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2b18      	cmp	r3, #24
 8000778:	dc03      	bgt.n	8000782 <tmin+0x4e>
		setNumberOnClock(4);
 800077a:	2004      	movs	r0, #4
 800077c:	f7ff fce6 	bl	800014c <setNumberOnClock>
}
 8000780:	e02f      	b.n	80007e2 <tmin+0xae>
	else if(counter<30){
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	2b1d      	cmp	r3, #29
 8000786:	dc03      	bgt.n	8000790 <tmin+0x5c>
		setNumberOnClock(5);
 8000788:	2005      	movs	r0, #5
 800078a:	f7ff fcdf 	bl	800014c <setNumberOnClock>
}
 800078e:	e028      	b.n	80007e2 <tmin+0xae>
	else if(counter<35){
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2b22      	cmp	r3, #34	; 0x22
 8000794:	dc03      	bgt.n	800079e <tmin+0x6a>
		setNumberOnClock(6);
 8000796:	2006      	movs	r0, #6
 8000798:	f7ff fcd8 	bl	800014c <setNumberOnClock>
}
 800079c:	e021      	b.n	80007e2 <tmin+0xae>
	else if(counter<40){
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	2b27      	cmp	r3, #39	; 0x27
 80007a2:	dc03      	bgt.n	80007ac <tmin+0x78>
		setNumberOnClock(7);
 80007a4:	2007      	movs	r0, #7
 80007a6:	f7ff fcd1 	bl	800014c <setNumberOnClock>
}
 80007aa:	e01a      	b.n	80007e2 <tmin+0xae>
	else if(counter<45){
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	2b2c      	cmp	r3, #44	; 0x2c
 80007b0:	dc03      	bgt.n	80007ba <tmin+0x86>
		setNumberOnClock(8);
 80007b2:	2008      	movs	r0, #8
 80007b4:	f7ff fcca 	bl	800014c <setNumberOnClock>
}
 80007b8:	e013      	b.n	80007e2 <tmin+0xae>
	else if(counter<50){
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	2b31      	cmp	r3, #49	; 0x31
 80007be:	dc03      	bgt.n	80007c8 <tmin+0x94>
		setNumberOnClock(9);
 80007c0:	2009      	movs	r0, #9
 80007c2:	f7ff fcc3 	bl	800014c <setNumberOnClock>
}
 80007c6:	e00c      	b.n	80007e2 <tmin+0xae>
	else if(counter<55){
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2b36      	cmp	r3, #54	; 0x36
 80007cc:	dc03      	bgt.n	80007d6 <tmin+0xa2>
		setNumberOnClock(10);
 80007ce:	200a      	movs	r0, #10
 80007d0:	f7ff fcbc 	bl	800014c <setNumberOnClock>
}
 80007d4:	e005      	b.n	80007e2 <tmin+0xae>
	else if(counter<60){
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	2b3b      	cmp	r3, #59	; 0x3b
 80007da:	dc02      	bgt.n	80007e2 <tmin+0xae>
		setNumberOnClock(11);
 80007dc:	200b      	movs	r0, #11
 80007de:	f7ff fcb5 	bl	800014c <setNumberOnClock>
}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
	...

080007ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f0:	f000 f93c 	bl	8000a6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f4:	f000 f83e 	bl	8000874 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f8:	f000 f878 	bl	80008ec <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  tsecond(counter0++);
 80007fc:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <main+0x7c>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	1c5a      	adds	r2, r3, #1
 8000802:	4919      	ldr	r1, [pc, #100]	; (8000868 <main+0x7c>)
 8000804:	600a      	str	r2, [r1, #0]
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff fede 	bl	80005c8 <tsecond>
      tmin(counter1);
 800080c:	4b17      	ldr	r3, [pc, #92]	; (800086c <main+0x80>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff ff8f 	bl	8000734 <tmin>
      thour(counter2);
 8000816:	4b16      	ldr	r3, [pc, #88]	; (8000870 <main+0x84>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff ff2f 	bl	800067e <thour>
	  if(counter0>=12){counter0=0; counter1++;}
 8000820:	4b11      	ldr	r3, [pc, #68]	; (8000868 <main+0x7c>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	2b0b      	cmp	r3, #11
 8000826:	dd07      	ble.n	8000838 <main+0x4c>
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <main+0x7c>)
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	4b0f      	ldr	r3, [pc, #60]	; (800086c <main+0x80>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	3301      	adds	r3, #1
 8000834:	4a0d      	ldr	r2, [pc, #52]	; (800086c <main+0x80>)
 8000836:	6013      	str	r3, [r2, #0]
	  if(counter1>=60){counter1=0; counter2++;}
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <main+0x80>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2b3b      	cmp	r3, #59	; 0x3b
 800083e:	dd07      	ble.n	8000850 <main+0x64>
 8000840:	4b0a      	ldr	r3, [pc, #40]	; (800086c <main+0x80>)
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	4b0a      	ldr	r3, [pc, #40]	; (8000870 <main+0x84>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	3301      	adds	r3, #1
 800084c:	4a08      	ldr	r2, [pc, #32]	; (8000870 <main+0x84>)
 800084e:	6013      	str	r3, [r2, #0]
	  if(counter2>=12){counter2=0;}
 8000850:	4b07      	ldr	r3, [pc, #28]	; (8000870 <main+0x84>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	2b0b      	cmp	r3, #11
 8000856:	dd02      	ble.n	800085e <main+0x72>
 8000858:	4b05      	ldr	r3, [pc, #20]	; (8000870 <main+0x84>)
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
	  HAL_Delay(50);
 800085e:	2032      	movs	r0, #50	; 0x32
 8000860:	f000 f966 	bl	8000b30 <HAL_Delay>
	  tsecond(counter0++);
 8000864:	e7ca      	b.n	80007fc <main+0x10>
 8000866:	bf00      	nop
 8000868:	20000028 	.word	0x20000028
 800086c:	2000002c 	.word	0x2000002c
 8000870:	20000030 	.word	0x20000030

08000874 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b090      	sub	sp, #64	; 0x40
 8000878:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087a:	f107 0318 	add.w	r3, r7, #24
 800087e:	2228      	movs	r2, #40	; 0x28
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f000 ffee 	bl	8001864 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
 8000894:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000896:	2302      	movs	r3, #2
 8000898:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800089a:	2301      	movs	r3, #1
 800089c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800089e:	2310      	movs	r3, #16
 80008a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008a2:	2300      	movs	r3, #0
 80008a4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a6:	f107 0318 	add.w	r3, r7, #24
 80008aa:	4618      	mov	r0, r3
 80008ac:	f000 fbda 	bl	8001064 <HAL_RCC_OscConfig>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <SystemClock_Config+0x46>
  {
    Error_Handler();
 80008b6:	f000 f84d 	bl	8000954 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ba:	230f      	movs	r3, #15
 80008bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008be:	2300      	movs	r3, #0
 80008c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c2:	2300      	movs	r3, #0
 80008c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008c6:	2300      	movs	r3, #0
 80008c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ca:	2300      	movs	r3, #0
 80008cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	2100      	movs	r1, #0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 fe46 	bl	8001564 <HAL_RCC_ClockConfig>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80008de:	f000 f839 	bl	8000954 <Error_Handler>
  }
}
 80008e2:	bf00      	nop
 80008e4:	3740      	adds	r7, #64	; 0x40
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
	...

080008ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f2:	f107 0308 	add.w	r3, r7, #8
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000900:	4b12      	ldr	r3, [pc, #72]	; (800094c <MX_GPIO_Init+0x60>)
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	4a11      	ldr	r2, [pc, #68]	; (800094c <MX_GPIO_Init+0x60>)
 8000906:	f043 0304 	orr.w	r3, r3, #4
 800090a:	6193      	str	r3, [r2, #24]
 800090c:	4b0f      	ldr	r3, [pc, #60]	; (800094c <MX_GPIO_Init+0x60>)
 800090e:	699b      	ldr	r3, [r3, #24]
 8000910:	f003 0304 	and.w	r3, r3, #4
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8000918:	2200      	movs	r2, #0
 800091a:	f641 71fe 	movw	r1, #8190	; 0x1ffe
 800091e:	480c      	ldr	r0, [pc, #48]	; (8000950 <MX_GPIO_Init+0x64>)
 8000920:	f000 fb88 	bl	8001034 <HAL_GPIO_WritePin>
                          |LED9_Pin|LED10_Pin|LED11_Pin|LED12_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin
                           LED5_Pin LED6_Pin LED7_Pin LED8_Pin
                           LED9_Pin LED10_Pin LED11_Pin LED12_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8000924:	f641 73fe 	movw	r3, #8190	; 0x1ffe
 8000928:	60bb      	str	r3, [r7, #8]
                          |LED5_Pin|LED6_Pin|LED7_Pin|LED8_Pin
                          |LED9_Pin|LED10_Pin|LED11_Pin|LED12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092a:	2301      	movs	r3, #1
 800092c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	2302      	movs	r3, #2
 8000934:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000936:	f107 0308 	add.w	r3, r7, #8
 800093a:	4619      	mov	r1, r3
 800093c:	4804      	ldr	r0, [pc, #16]	; (8000950 <MX_GPIO_Init+0x64>)
 800093e:	f000 f9ff 	bl	8000d40 <HAL_GPIO_Init>

}
 8000942:	bf00      	nop
 8000944:	3718      	adds	r7, #24
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40021000 	.word	0x40021000
 8000950:	40010800 	.word	0x40010800

08000954 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000958:	b672      	cpsid	i
}
 800095a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800095c:	e7fe      	b.n	800095c <Error_Handler+0x8>
	...

08000960 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000960:	b480      	push	{r7}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000966:	4b15      	ldr	r3, [pc, #84]	; (80009bc <HAL_MspInit+0x5c>)
 8000968:	699b      	ldr	r3, [r3, #24]
 800096a:	4a14      	ldr	r2, [pc, #80]	; (80009bc <HAL_MspInit+0x5c>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	6193      	str	r3, [r2, #24]
 8000972:	4b12      	ldr	r3, [pc, #72]	; (80009bc <HAL_MspInit+0x5c>)
 8000974:	699b      	ldr	r3, [r3, #24]
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	60bb      	str	r3, [r7, #8]
 800097c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097e:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <HAL_MspInit+0x5c>)
 8000980:	69db      	ldr	r3, [r3, #28]
 8000982:	4a0e      	ldr	r2, [pc, #56]	; (80009bc <HAL_MspInit+0x5c>)
 8000984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000988:	61d3      	str	r3, [r2, #28]
 800098a:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <HAL_MspInit+0x5c>)
 800098c:	69db      	ldr	r3, [r3, #28]
 800098e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000996:	4b0a      	ldr	r3, [pc, #40]	; (80009c0 <HAL_MspInit+0x60>)
 8000998:	685b      	ldr	r3, [r3, #4]
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	4a04      	ldr	r2, [pc, #16]	; (80009c0 <HAL_MspInit+0x60>)
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b2:	bf00      	nop
 80009b4:	3714      	adds	r7, #20
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bc80      	pop	{r7}
 80009ba:	4770      	bx	lr
 80009bc:	40021000 	.word	0x40021000
 80009c0:	40010000 	.word	0x40010000

080009c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <NMI_Handler+0x4>

080009ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ce:	e7fe      	b.n	80009ce <HardFault_Handler+0x4>

080009d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <MemManage_Handler+0x4>

080009d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009da:	e7fe      	b.n	80009da <BusFault_Handler+0x4>

080009dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <UsageFault_Handler+0x4>

080009e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bc80      	pop	{r7}
 80009ec:	4770      	bx	lr

080009ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bc80      	pop	{r7}
 80009f8:	4770      	bx	lr

080009fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bc80      	pop	{r7}
 8000a04:	4770      	bx	lr

08000a06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a0a:	f000 f875 	bl	8000af8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a16:	bf00      	nop
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bc80      	pop	{r7}
 8000a1c:	4770      	bx	lr
	...

08000a20 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a20:	f7ff fff7 	bl	8000a12 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a24:	480b      	ldr	r0, [pc, #44]	; (8000a54 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a26:	490c      	ldr	r1, [pc, #48]	; (8000a58 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a28:	4a0c      	ldr	r2, [pc, #48]	; (8000a5c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a2c:	e002      	b.n	8000a34 <LoopCopyDataInit>

08000a2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a32:	3304      	adds	r3, #4

08000a34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a38:	d3f9      	bcc.n	8000a2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a3a:	4a09      	ldr	r2, [pc, #36]	; (8000a60 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a3c:	4c09      	ldr	r4, [pc, #36]	; (8000a64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a40:	e001      	b.n	8000a46 <LoopFillZerobss>

08000a42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a44:	3204      	adds	r2, #4

08000a46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a48:	d3fb      	bcc.n	8000a42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a4a:	f000 fee7 	bl	800181c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a4e:	f7ff fecd 	bl	80007ec <main>
  bx lr
 8000a52:	4770      	bx	lr
  ldr r0, =_sdata
 8000a54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a58:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a5c:	080018b8 	.word	0x080018b8
  ldr r2, =_sbss
 8000a60:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a64:	20000038 	.word	0x20000038

08000a68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a68:	e7fe      	b.n	8000a68 <ADC1_2_IRQHandler>
	...

08000a6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a70:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <HAL_Init+0x28>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a07      	ldr	r2, [pc, #28]	; (8000a94 <HAL_Init+0x28>)
 8000a76:	f043 0310 	orr.w	r3, r3, #16
 8000a7a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a7c:	2003      	movs	r0, #3
 8000a7e:	f000 f92b 	bl	8000cd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a82:	200f      	movs	r0, #15
 8000a84:	f000 f808 	bl	8000a98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a88:	f7ff ff6a 	bl	8000960 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a8c:	2300      	movs	r3, #0
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40022000 	.word	0x40022000

08000a98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aa0:	4b12      	ldr	r3, [pc, #72]	; (8000aec <HAL_InitTick+0x54>)
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <HAL_InitTick+0x58>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f000 f935 	bl	8000d26 <HAL_SYSTICK_Config>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	e00e      	b.n	8000ae4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2b0f      	cmp	r3, #15
 8000aca:	d80a      	bhi.n	8000ae2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000acc:	2200      	movs	r2, #0
 8000ace:	6879      	ldr	r1, [r7, #4]
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	f000 f90b 	bl	8000cee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ad8:	4a06      	ldr	r2, [pc, #24]	; (8000af4 <HAL_InitTick+0x5c>)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	e000      	b.n	8000ae4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20000000 	.word	0x20000000
 8000af0:	20000008 	.word	0x20000008
 8000af4:	20000004 	.word	0x20000004

08000af8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000afc:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <HAL_IncTick+0x1c>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	461a      	mov	r2, r3
 8000b02:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <HAL_IncTick+0x20>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4413      	add	r3, r2
 8000b08:	4a03      	ldr	r2, [pc, #12]	; (8000b18 <HAL_IncTick+0x20>)
 8000b0a:	6013      	str	r3, [r2, #0]
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bc80      	pop	{r7}
 8000b12:	4770      	bx	lr
 8000b14:	20000008 	.word	0x20000008
 8000b18:	20000034 	.word	0x20000034

08000b1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b20:	4b02      	ldr	r3, [pc, #8]	; (8000b2c <HAL_GetTick+0x10>)
 8000b22:	681b      	ldr	r3, [r3, #0]
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr
 8000b2c:	20000034 	.word	0x20000034

08000b30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b38:	f7ff fff0 	bl	8000b1c <HAL_GetTick>
 8000b3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b48:	d005      	beq.n	8000b56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b4a:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <HAL_Delay+0x44>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	461a      	mov	r2, r3
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	4413      	add	r3, r2
 8000b54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b56:	bf00      	nop
 8000b58:	f7ff ffe0 	bl	8000b1c <HAL_GetTick>
 8000b5c:	4602      	mov	r2, r0
 8000b5e:	68bb      	ldr	r3, [r7, #8]
 8000b60:	1ad3      	subs	r3, r2, r3
 8000b62:	68fa      	ldr	r2, [r7, #12]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d8f7      	bhi.n	8000b58 <HAL_Delay+0x28>
  {
  }
}
 8000b68:	bf00      	nop
 8000b6a:	bf00      	nop
 8000b6c:	3710      	adds	r7, #16
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000008 	.word	0x20000008

08000b78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f003 0307 	and.w	r3, r3, #7
 8000b86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b88:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <__NVIC_SetPriorityGrouping+0x44>)
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b8e:	68ba      	ldr	r2, [r7, #8]
 8000b90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b94:	4013      	ands	r3, r2
 8000b96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ba4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000baa:	4a04      	ldr	r2, [pc, #16]	; (8000bbc <__NVIC_SetPriorityGrouping+0x44>)
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	60d3      	str	r3, [r2, #12]
}
 8000bb0:	bf00      	nop
 8000bb2:	3714      	adds	r7, #20
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bc80      	pop	{r7}
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc4:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	0a1b      	lsrs	r3, r3, #8
 8000bca:	f003 0307 	and.w	r3, r3, #7
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bc80      	pop	{r7}
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	6039      	str	r1, [r7, #0]
 8000be6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	db0a      	blt.n	8000c06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	b2da      	uxtb	r2, r3
 8000bf4:	490c      	ldr	r1, [pc, #48]	; (8000c28 <__NVIC_SetPriority+0x4c>)
 8000bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfa:	0112      	lsls	r2, r2, #4
 8000bfc:	b2d2      	uxtb	r2, r2
 8000bfe:	440b      	add	r3, r1
 8000c00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c04:	e00a      	b.n	8000c1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	b2da      	uxtb	r2, r3
 8000c0a:	4908      	ldr	r1, [pc, #32]	; (8000c2c <__NVIC_SetPriority+0x50>)
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	f003 030f 	and.w	r3, r3, #15
 8000c12:	3b04      	subs	r3, #4
 8000c14:	0112      	lsls	r2, r2, #4
 8000c16:	b2d2      	uxtb	r2, r2
 8000c18:	440b      	add	r3, r1
 8000c1a:	761a      	strb	r2, [r3, #24]
}
 8000c1c:	bf00      	nop
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bc80      	pop	{r7}
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	e000e100 	.word	0xe000e100
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b089      	sub	sp, #36	; 0x24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	f003 0307 	and.w	r3, r3, #7
 8000c42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c44:	69fb      	ldr	r3, [r7, #28]
 8000c46:	f1c3 0307 	rsb	r3, r3, #7
 8000c4a:	2b04      	cmp	r3, #4
 8000c4c:	bf28      	it	cs
 8000c4e:	2304      	movcs	r3, #4
 8000c50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	3304      	adds	r3, #4
 8000c56:	2b06      	cmp	r3, #6
 8000c58:	d902      	bls.n	8000c60 <NVIC_EncodePriority+0x30>
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	3b03      	subs	r3, #3
 8000c5e:	e000      	b.n	8000c62 <NVIC_EncodePriority+0x32>
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c64:	f04f 32ff 	mov.w	r2, #4294967295
 8000c68:	69bb      	ldr	r3, [r7, #24]
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	43da      	mvns	r2, r3
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	401a      	ands	r2, r3
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c78:	f04f 31ff 	mov.w	r1, #4294967295
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c82:	43d9      	mvns	r1, r3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c88:	4313      	orrs	r3, r2
         );
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3724      	adds	r7, #36	; 0x24
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr

08000c94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ca4:	d301      	bcc.n	8000caa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e00f      	b.n	8000cca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000caa:	4a0a      	ldr	r2, [pc, #40]	; (8000cd4 <SysTick_Config+0x40>)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cb2:	210f      	movs	r1, #15
 8000cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb8:	f7ff ff90 	bl	8000bdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cbc:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <SysTick_Config+0x40>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cc2:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <SysTick_Config+0x40>)
 8000cc4:	2207      	movs	r2, #7
 8000cc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cc8:	2300      	movs	r3, #0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	e000e010 	.word	0xe000e010

08000cd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	f7ff ff49 	bl	8000b78 <__NVIC_SetPriorityGrouping>
}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b086      	sub	sp, #24
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	60b9      	str	r1, [r7, #8]
 8000cf8:	607a      	str	r2, [r7, #4]
 8000cfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d00:	f7ff ff5e 	bl	8000bc0 <__NVIC_GetPriorityGrouping>
 8000d04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d06:	687a      	ldr	r2, [r7, #4]
 8000d08:	68b9      	ldr	r1, [r7, #8]
 8000d0a:	6978      	ldr	r0, [r7, #20]
 8000d0c:	f7ff ff90 	bl	8000c30 <NVIC_EncodePriority>
 8000d10:	4602      	mov	r2, r0
 8000d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d16:	4611      	mov	r1, r2
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff ff5f 	bl	8000bdc <__NVIC_SetPriority>
}
 8000d1e:	bf00      	nop
 8000d20:	3718      	adds	r7, #24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b082      	sub	sp, #8
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f7ff ffb0 	bl	8000c94 <SysTick_Config>
 8000d34:	4603      	mov	r3, r0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b08b      	sub	sp, #44	; 0x2c
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d52:	e148      	b.n	8000fe6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d54:	2201      	movs	r2, #1
 8000d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d58:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	69fa      	ldr	r2, [r7, #28]
 8000d64:	4013      	ands	r3, r2
 8000d66:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	f040 8137 	bne.w	8000fe0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	4aa3      	ldr	r2, [pc, #652]	; (8001004 <HAL_GPIO_Init+0x2c4>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d05e      	beq.n	8000e3a <HAL_GPIO_Init+0xfa>
 8000d7c:	4aa1      	ldr	r2, [pc, #644]	; (8001004 <HAL_GPIO_Init+0x2c4>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d875      	bhi.n	8000e6e <HAL_GPIO_Init+0x12e>
 8000d82:	4aa1      	ldr	r2, [pc, #644]	; (8001008 <HAL_GPIO_Init+0x2c8>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d058      	beq.n	8000e3a <HAL_GPIO_Init+0xfa>
 8000d88:	4a9f      	ldr	r2, [pc, #636]	; (8001008 <HAL_GPIO_Init+0x2c8>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d86f      	bhi.n	8000e6e <HAL_GPIO_Init+0x12e>
 8000d8e:	4a9f      	ldr	r2, [pc, #636]	; (800100c <HAL_GPIO_Init+0x2cc>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d052      	beq.n	8000e3a <HAL_GPIO_Init+0xfa>
 8000d94:	4a9d      	ldr	r2, [pc, #628]	; (800100c <HAL_GPIO_Init+0x2cc>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d869      	bhi.n	8000e6e <HAL_GPIO_Init+0x12e>
 8000d9a:	4a9d      	ldr	r2, [pc, #628]	; (8001010 <HAL_GPIO_Init+0x2d0>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d04c      	beq.n	8000e3a <HAL_GPIO_Init+0xfa>
 8000da0:	4a9b      	ldr	r2, [pc, #620]	; (8001010 <HAL_GPIO_Init+0x2d0>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d863      	bhi.n	8000e6e <HAL_GPIO_Init+0x12e>
 8000da6:	4a9b      	ldr	r2, [pc, #620]	; (8001014 <HAL_GPIO_Init+0x2d4>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d046      	beq.n	8000e3a <HAL_GPIO_Init+0xfa>
 8000dac:	4a99      	ldr	r2, [pc, #612]	; (8001014 <HAL_GPIO_Init+0x2d4>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d85d      	bhi.n	8000e6e <HAL_GPIO_Init+0x12e>
 8000db2:	2b12      	cmp	r3, #18
 8000db4:	d82a      	bhi.n	8000e0c <HAL_GPIO_Init+0xcc>
 8000db6:	2b12      	cmp	r3, #18
 8000db8:	d859      	bhi.n	8000e6e <HAL_GPIO_Init+0x12e>
 8000dba:	a201      	add	r2, pc, #4	; (adr r2, 8000dc0 <HAL_GPIO_Init+0x80>)
 8000dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dc0:	08000e3b 	.word	0x08000e3b
 8000dc4:	08000e15 	.word	0x08000e15
 8000dc8:	08000e27 	.word	0x08000e27
 8000dcc:	08000e69 	.word	0x08000e69
 8000dd0:	08000e6f 	.word	0x08000e6f
 8000dd4:	08000e6f 	.word	0x08000e6f
 8000dd8:	08000e6f 	.word	0x08000e6f
 8000ddc:	08000e6f 	.word	0x08000e6f
 8000de0:	08000e6f 	.word	0x08000e6f
 8000de4:	08000e6f 	.word	0x08000e6f
 8000de8:	08000e6f 	.word	0x08000e6f
 8000dec:	08000e6f 	.word	0x08000e6f
 8000df0:	08000e6f 	.word	0x08000e6f
 8000df4:	08000e6f 	.word	0x08000e6f
 8000df8:	08000e6f 	.word	0x08000e6f
 8000dfc:	08000e6f 	.word	0x08000e6f
 8000e00:	08000e6f 	.word	0x08000e6f
 8000e04:	08000e1d 	.word	0x08000e1d
 8000e08:	08000e31 	.word	0x08000e31
 8000e0c:	4a82      	ldr	r2, [pc, #520]	; (8001018 <HAL_GPIO_Init+0x2d8>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d013      	beq.n	8000e3a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e12:	e02c      	b.n	8000e6e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	623b      	str	r3, [r7, #32]
          break;
 8000e1a:	e029      	b.n	8000e70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	3304      	adds	r3, #4
 8000e22:	623b      	str	r3, [r7, #32]
          break;
 8000e24:	e024      	b.n	8000e70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	68db      	ldr	r3, [r3, #12]
 8000e2a:	3308      	adds	r3, #8
 8000e2c:	623b      	str	r3, [r7, #32]
          break;
 8000e2e:	e01f      	b.n	8000e70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	330c      	adds	r3, #12
 8000e36:	623b      	str	r3, [r7, #32]
          break;
 8000e38:	e01a      	b.n	8000e70 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	689b      	ldr	r3, [r3, #8]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d102      	bne.n	8000e48 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e42:	2304      	movs	r3, #4
 8000e44:	623b      	str	r3, [r7, #32]
          break;
 8000e46:	e013      	b.n	8000e70 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	689b      	ldr	r3, [r3, #8]
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d105      	bne.n	8000e5c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e50:	2308      	movs	r3, #8
 8000e52:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	69fa      	ldr	r2, [r7, #28]
 8000e58:	611a      	str	r2, [r3, #16]
          break;
 8000e5a:	e009      	b.n	8000e70 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e5c:	2308      	movs	r3, #8
 8000e5e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	69fa      	ldr	r2, [r7, #28]
 8000e64:	615a      	str	r2, [r3, #20]
          break;
 8000e66:	e003      	b.n	8000e70 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	623b      	str	r3, [r7, #32]
          break;
 8000e6c:	e000      	b.n	8000e70 <HAL_GPIO_Init+0x130>
          break;
 8000e6e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	2bff      	cmp	r3, #255	; 0xff
 8000e74:	d801      	bhi.n	8000e7a <HAL_GPIO_Init+0x13a>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	e001      	b.n	8000e7e <HAL_GPIO_Init+0x13e>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	3304      	adds	r3, #4
 8000e7e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	2bff      	cmp	r3, #255	; 0xff
 8000e84:	d802      	bhi.n	8000e8c <HAL_GPIO_Init+0x14c>
 8000e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	e002      	b.n	8000e92 <HAL_GPIO_Init+0x152>
 8000e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8e:	3b08      	subs	r3, #8
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	210f      	movs	r1, #15
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	401a      	ands	r2, r3
 8000ea4:	6a39      	ldr	r1, [r7, #32]
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8000eac:	431a      	orrs	r2, r3
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	f000 8090 	beq.w	8000fe0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ec0:	4b56      	ldr	r3, [pc, #344]	; (800101c <HAL_GPIO_Init+0x2dc>)
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	4a55      	ldr	r2, [pc, #340]	; (800101c <HAL_GPIO_Init+0x2dc>)
 8000ec6:	f043 0301 	orr.w	r3, r3, #1
 8000eca:	6193      	str	r3, [r2, #24]
 8000ecc:	4b53      	ldr	r3, [pc, #332]	; (800101c <HAL_GPIO_Init+0x2dc>)
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	f003 0301 	and.w	r3, r3, #1
 8000ed4:	60bb      	str	r3, [r7, #8]
 8000ed6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ed8:	4a51      	ldr	r2, [pc, #324]	; (8001020 <HAL_GPIO_Init+0x2e0>)
 8000eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000edc:	089b      	lsrs	r3, r3, #2
 8000ede:	3302      	adds	r3, #2
 8000ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ee4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee8:	f003 0303 	and.w	r3, r3, #3
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	220f      	movs	r2, #15
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	68fa      	ldr	r2, [r7, #12]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a49      	ldr	r2, [pc, #292]	; (8001024 <HAL_GPIO_Init+0x2e4>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d00d      	beq.n	8000f20 <HAL_GPIO_Init+0x1e0>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4a48      	ldr	r2, [pc, #288]	; (8001028 <HAL_GPIO_Init+0x2e8>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d007      	beq.n	8000f1c <HAL_GPIO_Init+0x1dc>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4a47      	ldr	r2, [pc, #284]	; (800102c <HAL_GPIO_Init+0x2ec>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d101      	bne.n	8000f18 <HAL_GPIO_Init+0x1d8>
 8000f14:	2302      	movs	r3, #2
 8000f16:	e004      	b.n	8000f22 <HAL_GPIO_Init+0x1e2>
 8000f18:	2303      	movs	r3, #3
 8000f1a:	e002      	b.n	8000f22 <HAL_GPIO_Init+0x1e2>
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e000      	b.n	8000f22 <HAL_GPIO_Init+0x1e2>
 8000f20:	2300      	movs	r3, #0
 8000f22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f24:	f002 0203 	and.w	r2, r2, #3
 8000f28:	0092      	lsls	r2, r2, #2
 8000f2a:	4093      	lsls	r3, r2
 8000f2c:	68fa      	ldr	r2, [r7, #12]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f32:	493b      	ldr	r1, [pc, #236]	; (8001020 <HAL_GPIO_Init+0x2e0>)
 8000f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f36:	089b      	lsrs	r3, r3, #2
 8000f38:	3302      	adds	r3, #2
 8000f3a:	68fa      	ldr	r2, [r7, #12]
 8000f3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d006      	beq.n	8000f5a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f4c:	4b38      	ldr	r3, [pc, #224]	; (8001030 <HAL_GPIO_Init+0x2f0>)
 8000f4e:	689a      	ldr	r2, [r3, #8]
 8000f50:	4937      	ldr	r1, [pc, #220]	; (8001030 <HAL_GPIO_Init+0x2f0>)
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	608b      	str	r3, [r1, #8]
 8000f58:	e006      	b.n	8000f68 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f5a:	4b35      	ldr	r3, [pc, #212]	; (8001030 <HAL_GPIO_Init+0x2f0>)
 8000f5c:	689a      	ldr	r2, [r3, #8]
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	43db      	mvns	r3, r3
 8000f62:	4933      	ldr	r1, [pc, #204]	; (8001030 <HAL_GPIO_Init+0x2f0>)
 8000f64:	4013      	ands	r3, r2
 8000f66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d006      	beq.n	8000f82 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f74:	4b2e      	ldr	r3, [pc, #184]	; (8001030 <HAL_GPIO_Init+0x2f0>)
 8000f76:	68da      	ldr	r2, [r3, #12]
 8000f78:	492d      	ldr	r1, [pc, #180]	; (8001030 <HAL_GPIO_Init+0x2f0>)
 8000f7a:	69bb      	ldr	r3, [r7, #24]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	60cb      	str	r3, [r1, #12]
 8000f80:	e006      	b.n	8000f90 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f82:	4b2b      	ldr	r3, [pc, #172]	; (8001030 <HAL_GPIO_Init+0x2f0>)
 8000f84:	68da      	ldr	r2, [r3, #12]
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	4929      	ldr	r1, [pc, #164]	; (8001030 <HAL_GPIO_Init+0x2f0>)
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d006      	beq.n	8000faa <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f9c:	4b24      	ldr	r3, [pc, #144]	; (8001030 <HAL_GPIO_Init+0x2f0>)
 8000f9e:	685a      	ldr	r2, [r3, #4]
 8000fa0:	4923      	ldr	r1, [pc, #140]	; (8001030 <HAL_GPIO_Init+0x2f0>)
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	604b      	str	r3, [r1, #4]
 8000fa8:	e006      	b.n	8000fb8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000faa:	4b21      	ldr	r3, [pc, #132]	; (8001030 <HAL_GPIO_Init+0x2f0>)
 8000fac:	685a      	ldr	r2, [r3, #4]
 8000fae:	69bb      	ldr	r3, [r7, #24]
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	491f      	ldr	r1, [pc, #124]	; (8001030 <HAL_GPIO_Init+0x2f0>)
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d006      	beq.n	8000fd2 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fc4:	4b1a      	ldr	r3, [pc, #104]	; (8001030 <HAL_GPIO_Init+0x2f0>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4919      	ldr	r1, [pc, #100]	; (8001030 <HAL_GPIO_Init+0x2f0>)
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	600b      	str	r3, [r1, #0]
 8000fd0:	e006      	b.n	8000fe0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fd2:	4b17      	ldr	r3, [pc, #92]	; (8001030 <HAL_GPIO_Init+0x2f0>)
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	69bb      	ldr	r3, [r7, #24]
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	4915      	ldr	r1, [pc, #84]	; (8001030 <HAL_GPIO_Init+0x2f0>)
 8000fdc:	4013      	ands	r3, r2
 8000fde:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fec:	fa22 f303 	lsr.w	r3, r2, r3
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	f47f aeaf 	bne.w	8000d54 <HAL_GPIO_Init+0x14>
  }
}
 8000ff6:	bf00      	nop
 8000ff8:	bf00      	nop
 8000ffa:	372c      	adds	r7, #44	; 0x2c
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bc80      	pop	{r7}
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	10320000 	.word	0x10320000
 8001008:	10310000 	.word	0x10310000
 800100c:	10220000 	.word	0x10220000
 8001010:	10210000 	.word	0x10210000
 8001014:	10120000 	.word	0x10120000
 8001018:	10110000 	.word	0x10110000
 800101c:	40021000 	.word	0x40021000
 8001020:	40010000 	.word	0x40010000
 8001024:	40010800 	.word	0x40010800
 8001028:	40010c00 	.word	0x40010c00
 800102c:	40011000 	.word	0x40011000
 8001030:	40010400 	.word	0x40010400

08001034 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	460b      	mov	r3, r1
 800103e:	807b      	strh	r3, [r7, #2]
 8001040:	4613      	mov	r3, r2
 8001042:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001044:	787b      	ldrb	r3, [r7, #1]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800104a:	887a      	ldrh	r2, [r7, #2]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001050:	e003      	b.n	800105a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001052:	887b      	ldrh	r3, [r7, #2]
 8001054:	041a      	lsls	r2, r3, #16
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	611a      	str	r2, [r3, #16]
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr

08001064 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d101      	bne.n	8001076 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e26c      	b.n	8001550 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	2b00      	cmp	r3, #0
 8001080:	f000 8087 	beq.w	8001192 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001084:	4b92      	ldr	r3, [pc, #584]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f003 030c 	and.w	r3, r3, #12
 800108c:	2b04      	cmp	r3, #4
 800108e:	d00c      	beq.n	80010aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001090:	4b8f      	ldr	r3, [pc, #572]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f003 030c 	and.w	r3, r3, #12
 8001098:	2b08      	cmp	r3, #8
 800109a:	d112      	bne.n	80010c2 <HAL_RCC_OscConfig+0x5e>
 800109c:	4b8c      	ldr	r3, [pc, #560]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010a8:	d10b      	bne.n	80010c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010aa:	4b89      	ldr	r3, [pc, #548]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d06c      	beq.n	8001190 <HAL_RCC_OscConfig+0x12c>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d168      	bne.n	8001190 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e246      	b.n	8001550 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010ca:	d106      	bne.n	80010da <HAL_RCC_OscConfig+0x76>
 80010cc:	4b80      	ldr	r3, [pc, #512]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a7f      	ldr	r2, [pc, #508]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 80010d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010d6:	6013      	str	r3, [r2, #0]
 80010d8:	e02e      	b.n	8001138 <HAL_RCC_OscConfig+0xd4>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d10c      	bne.n	80010fc <HAL_RCC_OscConfig+0x98>
 80010e2:	4b7b      	ldr	r3, [pc, #492]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a7a      	ldr	r2, [pc, #488]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 80010e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010ec:	6013      	str	r3, [r2, #0]
 80010ee:	4b78      	ldr	r3, [pc, #480]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a77      	ldr	r2, [pc, #476]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 80010f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010f8:	6013      	str	r3, [r2, #0]
 80010fa:	e01d      	b.n	8001138 <HAL_RCC_OscConfig+0xd4>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001104:	d10c      	bne.n	8001120 <HAL_RCC_OscConfig+0xbc>
 8001106:	4b72      	ldr	r3, [pc, #456]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a71      	ldr	r2, [pc, #452]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 800110c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001110:	6013      	str	r3, [r2, #0]
 8001112:	4b6f      	ldr	r3, [pc, #444]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a6e      	ldr	r2, [pc, #440]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 8001118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800111c:	6013      	str	r3, [r2, #0]
 800111e:	e00b      	b.n	8001138 <HAL_RCC_OscConfig+0xd4>
 8001120:	4b6b      	ldr	r3, [pc, #428]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a6a      	ldr	r2, [pc, #424]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 8001126:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800112a:	6013      	str	r3, [r2, #0]
 800112c:	4b68      	ldr	r3, [pc, #416]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a67      	ldr	r2, [pc, #412]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 8001132:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001136:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d013      	beq.n	8001168 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001140:	f7ff fcec 	bl	8000b1c <HAL_GetTick>
 8001144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001146:	e008      	b.n	800115a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001148:	f7ff fce8 	bl	8000b1c <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	2b64      	cmp	r3, #100	; 0x64
 8001154:	d901      	bls.n	800115a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001156:	2303      	movs	r3, #3
 8001158:	e1fa      	b.n	8001550 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800115a:	4b5d      	ldr	r3, [pc, #372]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d0f0      	beq.n	8001148 <HAL_RCC_OscConfig+0xe4>
 8001166:	e014      	b.n	8001192 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001168:	f7ff fcd8 	bl	8000b1c <HAL_GetTick>
 800116c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800116e:	e008      	b.n	8001182 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001170:	f7ff fcd4 	bl	8000b1c <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2b64      	cmp	r3, #100	; 0x64
 800117c:	d901      	bls.n	8001182 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800117e:	2303      	movs	r3, #3
 8001180:	e1e6      	b.n	8001550 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001182:	4b53      	ldr	r3, [pc, #332]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d1f0      	bne.n	8001170 <HAL_RCC_OscConfig+0x10c>
 800118e:	e000      	b.n	8001192 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001190:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	2b00      	cmp	r3, #0
 800119c:	d063      	beq.n	8001266 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800119e:	4b4c      	ldr	r3, [pc, #304]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f003 030c 	and.w	r3, r3, #12
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d00b      	beq.n	80011c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011aa:	4b49      	ldr	r3, [pc, #292]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f003 030c 	and.w	r3, r3, #12
 80011b2:	2b08      	cmp	r3, #8
 80011b4:	d11c      	bne.n	80011f0 <HAL_RCC_OscConfig+0x18c>
 80011b6:	4b46      	ldr	r3, [pc, #280]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d116      	bne.n	80011f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011c2:	4b43      	ldr	r3, [pc, #268]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d005      	beq.n	80011da <HAL_RCC_OscConfig+0x176>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	691b      	ldr	r3, [r3, #16]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d001      	beq.n	80011da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e1ba      	b.n	8001550 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011da:	4b3d      	ldr	r3, [pc, #244]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	695b      	ldr	r3, [r3, #20]
 80011e6:	00db      	lsls	r3, r3, #3
 80011e8:	4939      	ldr	r1, [pc, #228]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 80011ea:	4313      	orrs	r3, r2
 80011ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ee:	e03a      	b.n	8001266 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	691b      	ldr	r3, [r3, #16]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d020      	beq.n	800123a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011f8:	4b36      	ldr	r3, [pc, #216]	; (80012d4 <HAL_RCC_OscConfig+0x270>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011fe:	f7ff fc8d 	bl	8000b1c <HAL_GetTick>
 8001202:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001204:	e008      	b.n	8001218 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001206:	f7ff fc89 	bl	8000b1c <HAL_GetTick>
 800120a:	4602      	mov	r2, r0
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	2b02      	cmp	r3, #2
 8001212:	d901      	bls.n	8001218 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001214:	2303      	movs	r3, #3
 8001216:	e19b      	b.n	8001550 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001218:	4b2d      	ldr	r3, [pc, #180]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0302 	and.w	r3, r3, #2
 8001220:	2b00      	cmp	r3, #0
 8001222:	d0f0      	beq.n	8001206 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001224:	4b2a      	ldr	r3, [pc, #168]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	695b      	ldr	r3, [r3, #20]
 8001230:	00db      	lsls	r3, r3, #3
 8001232:	4927      	ldr	r1, [pc, #156]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 8001234:	4313      	orrs	r3, r2
 8001236:	600b      	str	r3, [r1, #0]
 8001238:	e015      	b.n	8001266 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800123a:	4b26      	ldr	r3, [pc, #152]	; (80012d4 <HAL_RCC_OscConfig+0x270>)
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001240:	f7ff fc6c 	bl	8000b1c <HAL_GetTick>
 8001244:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001246:	e008      	b.n	800125a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001248:	f7ff fc68 	bl	8000b1c <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	2b02      	cmp	r3, #2
 8001254:	d901      	bls.n	800125a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e17a      	b.n	8001550 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800125a:	4b1d      	ldr	r3, [pc, #116]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1f0      	bne.n	8001248 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0308 	and.w	r3, r3, #8
 800126e:	2b00      	cmp	r3, #0
 8001270:	d03a      	beq.n	80012e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	699b      	ldr	r3, [r3, #24]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d019      	beq.n	80012ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800127a:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <HAL_RCC_OscConfig+0x274>)
 800127c:	2201      	movs	r2, #1
 800127e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001280:	f7ff fc4c 	bl	8000b1c <HAL_GetTick>
 8001284:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001286:	e008      	b.n	800129a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001288:	f7ff fc48 	bl	8000b1c <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b02      	cmp	r3, #2
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e15a      	b.n	8001550 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800129a:	4b0d      	ldr	r3, [pc, #52]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 800129c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d0f0      	beq.n	8001288 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80012a6:	2001      	movs	r0, #1
 80012a8:	f000 fa9a 	bl	80017e0 <RCC_Delay>
 80012ac:	e01c      	b.n	80012e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012ae:	4b0a      	ldr	r3, [pc, #40]	; (80012d8 <HAL_RCC_OscConfig+0x274>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b4:	f7ff fc32 	bl	8000b1c <HAL_GetTick>
 80012b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012ba:	e00f      	b.n	80012dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012bc:	f7ff fc2e 	bl	8000b1c <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d908      	bls.n	80012dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e140      	b.n	8001550 <HAL_RCC_OscConfig+0x4ec>
 80012ce:	bf00      	nop
 80012d0:	40021000 	.word	0x40021000
 80012d4:	42420000 	.word	0x42420000
 80012d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012dc:	4b9e      	ldr	r3, [pc, #632]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 80012de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e0:	f003 0302 	and.w	r3, r3, #2
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d1e9      	bne.n	80012bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0304 	and.w	r3, r3, #4
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	f000 80a6 	beq.w	8001442 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012f6:	2300      	movs	r3, #0
 80012f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012fa:	4b97      	ldr	r3, [pc, #604]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d10d      	bne.n	8001322 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001306:	4b94      	ldr	r3, [pc, #592]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	4a93      	ldr	r2, [pc, #588]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 800130c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001310:	61d3      	str	r3, [r2, #28]
 8001312:	4b91      	ldr	r3, [pc, #580]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 8001314:	69db      	ldr	r3, [r3, #28]
 8001316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800131e:	2301      	movs	r3, #1
 8001320:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001322:	4b8e      	ldr	r3, [pc, #568]	; (800155c <HAL_RCC_OscConfig+0x4f8>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800132a:	2b00      	cmp	r3, #0
 800132c:	d118      	bne.n	8001360 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800132e:	4b8b      	ldr	r3, [pc, #556]	; (800155c <HAL_RCC_OscConfig+0x4f8>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a8a      	ldr	r2, [pc, #552]	; (800155c <HAL_RCC_OscConfig+0x4f8>)
 8001334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001338:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800133a:	f7ff fbef 	bl	8000b1c <HAL_GetTick>
 800133e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001340:	e008      	b.n	8001354 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001342:	f7ff fbeb 	bl	8000b1c <HAL_GetTick>
 8001346:	4602      	mov	r2, r0
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	2b64      	cmp	r3, #100	; 0x64
 800134e:	d901      	bls.n	8001354 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	e0fd      	b.n	8001550 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001354:	4b81      	ldr	r3, [pc, #516]	; (800155c <HAL_RCC_OscConfig+0x4f8>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800135c:	2b00      	cmp	r3, #0
 800135e:	d0f0      	beq.n	8001342 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d106      	bne.n	8001376 <HAL_RCC_OscConfig+0x312>
 8001368:	4b7b      	ldr	r3, [pc, #492]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 800136a:	6a1b      	ldr	r3, [r3, #32]
 800136c:	4a7a      	ldr	r2, [pc, #488]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 800136e:	f043 0301 	orr.w	r3, r3, #1
 8001372:	6213      	str	r3, [r2, #32]
 8001374:	e02d      	b.n	80013d2 <HAL_RCC_OscConfig+0x36e>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d10c      	bne.n	8001398 <HAL_RCC_OscConfig+0x334>
 800137e:	4b76      	ldr	r3, [pc, #472]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 8001380:	6a1b      	ldr	r3, [r3, #32]
 8001382:	4a75      	ldr	r2, [pc, #468]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 8001384:	f023 0301 	bic.w	r3, r3, #1
 8001388:	6213      	str	r3, [r2, #32]
 800138a:	4b73      	ldr	r3, [pc, #460]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 800138c:	6a1b      	ldr	r3, [r3, #32]
 800138e:	4a72      	ldr	r2, [pc, #456]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 8001390:	f023 0304 	bic.w	r3, r3, #4
 8001394:	6213      	str	r3, [r2, #32]
 8001396:	e01c      	b.n	80013d2 <HAL_RCC_OscConfig+0x36e>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	2b05      	cmp	r3, #5
 800139e:	d10c      	bne.n	80013ba <HAL_RCC_OscConfig+0x356>
 80013a0:	4b6d      	ldr	r3, [pc, #436]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 80013a2:	6a1b      	ldr	r3, [r3, #32]
 80013a4:	4a6c      	ldr	r2, [pc, #432]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 80013a6:	f043 0304 	orr.w	r3, r3, #4
 80013aa:	6213      	str	r3, [r2, #32]
 80013ac:	4b6a      	ldr	r3, [pc, #424]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 80013ae:	6a1b      	ldr	r3, [r3, #32]
 80013b0:	4a69      	ldr	r2, [pc, #420]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 80013b2:	f043 0301 	orr.w	r3, r3, #1
 80013b6:	6213      	str	r3, [r2, #32]
 80013b8:	e00b      	b.n	80013d2 <HAL_RCC_OscConfig+0x36e>
 80013ba:	4b67      	ldr	r3, [pc, #412]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 80013bc:	6a1b      	ldr	r3, [r3, #32]
 80013be:	4a66      	ldr	r2, [pc, #408]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 80013c0:	f023 0301 	bic.w	r3, r3, #1
 80013c4:	6213      	str	r3, [r2, #32]
 80013c6:	4b64      	ldr	r3, [pc, #400]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 80013c8:	6a1b      	ldr	r3, [r3, #32]
 80013ca:	4a63      	ldr	r2, [pc, #396]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 80013cc:	f023 0304 	bic.w	r3, r3, #4
 80013d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d015      	beq.n	8001406 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013da:	f7ff fb9f 	bl	8000b1c <HAL_GetTick>
 80013de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013e0:	e00a      	b.n	80013f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013e2:	f7ff fb9b 	bl	8000b1c <HAL_GetTick>
 80013e6:	4602      	mov	r2, r0
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d901      	bls.n	80013f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80013f4:	2303      	movs	r3, #3
 80013f6:	e0ab      	b.n	8001550 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013f8:	4b57      	ldr	r3, [pc, #348]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 80013fa:	6a1b      	ldr	r3, [r3, #32]
 80013fc:	f003 0302 	and.w	r3, r3, #2
 8001400:	2b00      	cmp	r3, #0
 8001402:	d0ee      	beq.n	80013e2 <HAL_RCC_OscConfig+0x37e>
 8001404:	e014      	b.n	8001430 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001406:	f7ff fb89 	bl	8000b1c <HAL_GetTick>
 800140a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800140c:	e00a      	b.n	8001424 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800140e:	f7ff fb85 	bl	8000b1c <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	f241 3288 	movw	r2, #5000	; 0x1388
 800141c:	4293      	cmp	r3, r2
 800141e:	d901      	bls.n	8001424 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	e095      	b.n	8001550 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001424:	4b4c      	ldr	r3, [pc, #304]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 8001426:	6a1b      	ldr	r3, [r3, #32]
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	2b00      	cmp	r3, #0
 800142e:	d1ee      	bne.n	800140e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001430:	7dfb      	ldrb	r3, [r7, #23]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d105      	bne.n	8001442 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001436:	4b48      	ldr	r3, [pc, #288]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 8001438:	69db      	ldr	r3, [r3, #28]
 800143a:	4a47      	ldr	r2, [pc, #284]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 800143c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001440:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	69db      	ldr	r3, [r3, #28]
 8001446:	2b00      	cmp	r3, #0
 8001448:	f000 8081 	beq.w	800154e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800144c:	4b42      	ldr	r3, [pc, #264]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f003 030c 	and.w	r3, r3, #12
 8001454:	2b08      	cmp	r3, #8
 8001456:	d061      	beq.n	800151c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	69db      	ldr	r3, [r3, #28]
 800145c:	2b02      	cmp	r3, #2
 800145e:	d146      	bne.n	80014ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001460:	4b3f      	ldr	r3, [pc, #252]	; (8001560 <HAL_RCC_OscConfig+0x4fc>)
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001466:	f7ff fb59 	bl	8000b1c <HAL_GetTick>
 800146a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800146c:	e008      	b.n	8001480 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800146e:	f7ff fb55 	bl	8000b1c <HAL_GetTick>
 8001472:	4602      	mov	r2, r0
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d901      	bls.n	8001480 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e067      	b.n	8001550 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001480:	4b35      	ldr	r3, [pc, #212]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d1f0      	bne.n	800146e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6a1b      	ldr	r3, [r3, #32]
 8001490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001494:	d108      	bne.n	80014a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001496:	4b30      	ldr	r3, [pc, #192]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	492d      	ldr	r1, [pc, #180]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 80014a4:	4313      	orrs	r3, r2
 80014a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014a8:	4b2b      	ldr	r3, [pc, #172]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a19      	ldr	r1, [r3, #32]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b8:	430b      	orrs	r3, r1
 80014ba:	4927      	ldr	r1, [pc, #156]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 80014bc:	4313      	orrs	r3, r2
 80014be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014c0:	4b27      	ldr	r3, [pc, #156]	; (8001560 <HAL_RCC_OscConfig+0x4fc>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c6:	f7ff fb29 	bl	8000b1c <HAL_GetTick>
 80014ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014cc:	e008      	b.n	80014e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ce:	f7ff fb25 	bl	8000b1c <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d901      	bls.n	80014e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e037      	b.n	8001550 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014e0:	4b1d      	ldr	r3, [pc, #116]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d0f0      	beq.n	80014ce <HAL_RCC_OscConfig+0x46a>
 80014ec:	e02f      	b.n	800154e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ee:	4b1c      	ldr	r3, [pc, #112]	; (8001560 <HAL_RCC_OscConfig+0x4fc>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f4:	f7ff fb12 	bl	8000b1c <HAL_GetTick>
 80014f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014fc:	f7ff fb0e 	bl	8000b1c <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b02      	cmp	r3, #2
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e020      	b.n	8001550 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800150e:	4b12      	ldr	r3, [pc, #72]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1f0      	bne.n	80014fc <HAL_RCC_OscConfig+0x498>
 800151a:	e018      	b.n	800154e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	69db      	ldr	r3, [r3, #28]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d101      	bne.n	8001528 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e013      	b.n	8001550 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001528:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a1b      	ldr	r3, [r3, #32]
 8001538:	429a      	cmp	r2, r3
 800153a:	d106      	bne.n	800154a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001546:	429a      	cmp	r2, r3
 8001548:	d001      	beq.n	800154e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e000      	b.n	8001550 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800154e:	2300      	movs	r3, #0
}
 8001550:	4618      	mov	r0, r3
 8001552:	3718      	adds	r7, #24
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40021000 	.word	0x40021000
 800155c:	40007000 	.word	0x40007000
 8001560:	42420060 	.word	0x42420060

08001564 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d101      	bne.n	8001578 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e0d0      	b.n	800171a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001578:	4b6a      	ldr	r3, [pc, #424]	; (8001724 <HAL_RCC_ClockConfig+0x1c0>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0307 	and.w	r3, r3, #7
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	429a      	cmp	r2, r3
 8001584:	d910      	bls.n	80015a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001586:	4b67      	ldr	r3, [pc, #412]	; (8001724 <HAL_RCC_ClockConfig+0x1c0>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f023 0207 	bic.w	r2, r3, #7
 800158e:	4965      	ldr	r1, [pc, #404]	; (8001724 <HAL_RCC_ClockConfig+0x1c0>)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	4313      	orrs	r3, r2
 8001594:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001596:	4b63      	ldr	r3, [pc, #396]	; (8001724 <HAL_RCC_ClockConfig+0x1c0>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	683a      	ldr	r2, [r7, #0]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d001      	beq.n	80015a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e0b8      	b.n	800171a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0302 	and.w	r3, r3, #2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d020      	beq.n	80015f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0304 	and.w	r3, r3, #4
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d005      	beq.n	80015cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015c0:	4b59      	ldr	r3, [pc, #356]	; (8001728 <HAL_RCC_ClockConfig+0x1c4>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	4a58      	ldr	r2, [pc, #352]	; (8001728 <HAL_RCC_ClockConfig+0x1c4>)
 80015c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80015ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0308 	and.w	r3, r3, #8
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d005      	beq.n	80015e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015d8:	4b53      	ldr	r3, [pc, #332]	; (8001728 <HAL_RCC_ClockConfig+0x1c4>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	4a52      	ldr	r2, [pc, #328]	; (8001728 <HAL_RCC_ClockConfig+0x1c4>)
 80015de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80015e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015e4:	4b50      	ldr	r3, [pc, #320]	; (8001728 <HAL_RCC_ClockConfig+0x1c4>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	494d      	ldr	r1, [pc, #308]	; (8001728 <HAL_RCC_ClockConfig+0x1c4>)
 80015f2:	4313      	orrs	r3, r2
 80015f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d040      	beq.n	8001684 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d107      	bne.n	800161a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800160a:	4b47      	ldr	r3, [pc, #284]	; (8001728 <HAL_RCC_ClockConfig+0x1c4>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d115      	bne.n	8001642 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e07f      	b.n	800171a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	2b02      	cmp	r3, #2
 8001620:	d107      	bne.n	8001632 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001622:	4b41      	ldr	r3, [pc, #260]	; (8001728 <HAL_RCC_ClockConfig+0x1c4>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d109      	bne.n	8001642 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e073      	b.n	800171a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001632:	4b3d      	ldr	r3, [pc, #244]	; (8001728 <HAL_RCC_ClockConfig+0x1c4>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d101      	bne.n	8001642 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e06b      	b.n	800171a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001642:	4b39      	ldr	r3, [pc, #228]	; (8001728 <HAL_RCC_ClockConfig+0x1c4>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f023 0203 	bic.w	r2, r3, #3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	4936      	ldr	r1, [pc, #216]	; (8001728 <HAL_RCC_ClockConfig+0x1c4>)
 8001650:	4313      	orrs	r3, r2
 8001652:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001654:	f7ff fa62 	bl	8000b1c <HAL_GetTick>
 8001658:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800165a:	e00a      	b.n	8001672 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800165c:	f7ff fa5e 	bl	8000b1c <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	f241 3288 	movw	r2, #5000	; 0x1388
 800166a:	4293      	cmp	r3, r2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e053      	b.n	800171a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001672:	4b2d      	ldr	r3, [pc, #180]	; (8001728 <HAL_RCC_ClockConfig+0x1c4>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f003 020c 	and.w	r2, r3, #12
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	429a      	cmp	r2, r3
 8001682:	d1eb      	bne.n	800165c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001684:	4b27      	ldr	r3, [pc, #156]	; (8001724 <HAL_RCC_ClockConfig+0x1c0>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0307 	and.w	r3, r3, #7
 800168c:	683a      	ldr	r2, [r7, #0]
 800168e:	429a      	cmp	r2, r3
 8001690:	d210      	bcs.n	80016b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001692:	4b24      	ldr	r3, [pc, #144]	; (8001724 <HAL_RCC_ClockConfig+0x1c0>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f023 0207 	bic.w	r2, r3, #7
 800169a:	4922      	ldr	r1, [pc, #136]	; (8001724 <HAL_RCC_ClockConfig+0x1c0>)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	4313      	orrs	r3, r2
 80016a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016a2:	4b20      	ldr	r3, [pc, #128]	; (8001724 <HAL_RCC_ClockConfig+0x1c0>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0307 	and.w	r3, r3, #7
 80016aa:	683a      	ldr	r2, [r7, #0]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d001      	beq.n	80016b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e032      	b.n	800171a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0304 	and.w	r3, r3, #4
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d008      	beq.n	80016d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016c0:	4b19      	ldr	r3, [pc, #100]	; (8001728 <HAL_RCC_ClockConfig+0x1c4>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	4916      	ldr	r1, [pc, #88]	; (8001728 <HAL_RCC_ClockConfig+0x1c4>)
 80016ce:	4313      	orrs	r3, r2
 80016d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0308 	and.w	r3, r3, #8
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d009      	beq.n	80016f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016de:	4b12      	ldr	r3, [pc, #72]	; (8001728 <HAL_RCC_ClockConfig+0x1c4>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	691b      	ldr	r3, [r3, #16]
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	490e      	ldr	r1, [pc, #56]	; (8001728 <HAL_RCC_ClockConfig+0x1c4>)
 80016ee:	4313      	orrs	r3, r2
 80016f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016f2:	f000 f821 	bl	8001738 <HAL_RCC_GetSysClockFreq>
 80016f6:	4602      	mov	r2, r0
 80016f8:	4b0b      	ldr	r3, [pc, #44]	; (8001728 <HAL_RCC_ClockConfig+0x1c4>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	091b      	lsrs	r3, r3, #4
 80016fe:	f003 030f 	and.w	r3, r3, #15
 8001702:	490a      	ldr	r1, [pc, #40]	; (800172c <HAL_RCC_ClockConfig+0x1c8>)
 8001704:	5ccb      	ldrb	r3, [r1, r3]
 8001706:	fa22 f303 	lsr.w	r3, r2, r3
 800170a:	4a09      	ldr	r2, [pc, #36]	; (8001730 <HAL_RCC_ClockConfig+0x1cc>)
 800170c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800170e:	4b09      	ldr	r3, [pc, #36]	; (8001734 <HAL_RCC_ClockConfig+0x1d0>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff f9c0 	bl	8000a98 <HAL_InitTick>

  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40022000 	.word	0x40022000
 8001728:	40021000 	.word	0x40021000
 800172c:	0800188c 	.word	0x0800188c
 8001730:	20000000 	.word	0x20000000
 8001734:	20000004 	.word	0x20000004

08001738 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001738:	b480      	push	{r7}
 800173a:	b087      	sub	sp, #28
 800173c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	2300      	movs	r3, #0
 8001744:	60bb      	str	r3, [r7, #8]
 8001746:	2300      	movs	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
 800174a:	2300      	movs	r3, #0
 800174c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800174e:	2300      	movs	r3, #0
 8001750:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001752:	4b1e      	ldr	r3, [pc, #120]	; (80017cc <HAL_RCC_GetSysClockFreq+0x94>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f003 030c 	and.w	r3, r3, #12
 800175e:	2b04      	cmp	r3, #4
 8001760:	d002      	beq.n	8001768 <HAL_RCC_GetSysClockFreq+0x30>
 8001762:	2b08      	cmp	r3, #8
 8001764:	d003      	beq.n	800176e <HAL_RCC_GetSysClockFreq+0x36>
 8001766:	e027      	b.n	80017b8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001768:	4b19      	ldr	r3, [pc, #100]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800176a:	613b      	str	r3, [r7, #16]
      break;
 800176c:	e027      	b.n	80017be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	0c9b      	lsrs	r3, r3, #18
 8001772:	f003 030f 	and.w	r3, r3, #15
 8001776:	4a17      	ldr	r2, [pc, #92]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001778:	5cd3      	ldrb	r3, [r2, r3]
 800177a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d010      	beq.n	80017a8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001786:	4b11      	ldr	r3, [pc, #68]	; (80017cc <HAL_RCC_GetSysClockFreq+0x94>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	0c5b      	lsrs	r3, r3, #17
 800178c:	f003 0301 	and.w	r3, r3, #1
 8001790:	4a11      	ldr	r2, [pc, #68]	; (80017d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001792:	5cd3      	ldrb	r3, [r2, r3]
 8001794:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a0d      	ldr	r2, [pc, #52]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800179a:	fb02 f203 	mul.w	r2, r2, r3
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a4:	617b      	str	r3, [r7, #20]
 80017a6:	e004      	b.n	80017b2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4a0c      	ldr	r2, [pc, #48]	; (80017dc <HAL_RCC_GetSysClockFreq+0xa4>)
 80017ac:	fb02 f303 	mul.w	r3, r2, r3
 80017b0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	613b      	str	r3, [r7, #16]
      break;
 80017b6:	e002      	b.n	80017be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017b8:	4b05      	ldr	r3, [pc, #20]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x98>)
 80017ba:	613b      	str	r3, [r7, #16]
      break;
 80017bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017be:	693b      	ldr	r3, [r7, #16]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	371c      	adds	r7, #28
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bc80      	pop	{r7}
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	40021000 	.word	0x40021000
 80017d0:	007a1200 	.word	0x007a1200
 80017d4:	0800189c 	.word	0x0800189c
 80017d8:	080018ac 	.word	0x080018ac
 80017dc:	003d0900 	.word	0x003d0900

080017e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80017e8:	4b0a      	ldr	r3, [pc, #40]	; (8001814 <RCC_Delay+0x34>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a0a      	ldr	r2, [pc, #40]	; (8001818 <RCC_Delay+0x38>)
 80017ee:	fba2 2303 	umull	r2, r3, r2, r3
 80017f2:	0a5b      	lsrs	r3, r3, #9
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	fb02 f303 	mul.w	r3, r2, r3
 80017fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80017fc:	bf00      	nop
  }
  while (Delay --);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	1e5a      	subs	r2, r3, #1
 8001802:	60fa      	str	r2, [r7, #12]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d1f9      	bne.n	80017fc <RCC_Delay+0x1c>
}
 8001808:	bf00      	nop
 800180a:	bf00      	nop
 800180c:	3714      	adds	r7, #20
 800180e:	46bd      	mov	sp, r7
 8001810:	bc80      	pop	{r7}
 8001812:	4770      	bx	lr
 8001814:	20000000 	.word	0x20000000
 8001818:	10624dd3 	.word	0x10624dd3

0800181c <__libc_init_array>:
 800181c:	b570      	push	{r4, r5, r6, lr}
 800181e:	2600      	movs	r6, #0
 8001820:	4d0c      	ldr	r5, [pc, #48]	; (8001854 <__libc_init_array+0x38>)
 8001822:	4c0d      	ldr	r4, [pc, #52]	; (8001858 <__libc_init_array+0x3c>)
 8001824:	1b64      	subs	r4, r4, r5
 8001826:	10a4      	asrs	r4, r4, #2
 8001828:	42a6      	cmp	r6, r4
 800182a:	d109      	bne.n	8001840 <__libc_init_array+0x24>
 800182c:	f000 f822 	bl	8001874 <_init>
 8001830:	2600      	movs	r6, #0
 8001832:	4d0a      	ldr	r5, [pc, #40]	; (800185c <__libc_init_array+0x40>)
 8001834:	4c0a      	ldr	r4, [pc, #40]	; (8001860 <__libc_init_array+0x44>)
 8001836:	1b64      	subs	r4, r4, r5
 8001838:	10a4      	asrs	r4, r4, #2
 800183a:	42a6      	cmp	r6, r4
 800183c:	d105      	bne.n	800184a <__libc_init_array+0x2e>
 800183e:	bd70      	pop	{r4, r5, r6, pc}
 8001840:	f855 3b04 	ldr.w	r3, [r5], #4
 8001844:	4798      	blx	r3
 8001846:	3601      	adds	r6, #1
 8001848:	e7ee      	b.n	8001828 <__libc_init_array+0xc>
 800184a:	f855 3b04 	ldr.w	r3, [r5], #4
 800184e:	4798      	blx	r3
 8001850:	3601      	adds	r6, #1
 8001852:	e7f2      	b.n	800183a <__libc_init_array+0x1e>
 8001854:	080018b0 	.word	0x080018b0
 8001858:	080018b0 	.word	0x080018b0
 800185c:	080018b0 	.word	0x080018b0
 8001860:	080018b4 	.word	0x080018b4

08001864 <memset>:
 8001864:	4603      	mov	r3, r0
 8001866:	4402      	add	r2, r0
 8001868:	4293      	cmp	r3, r2
 800186a:	d100      	bne.n	800186e <memset+0xa>
 800186c:	4770      	bx	lr
 800186e:	f803 1b01 	strb.w	r1, [r3], #1
 8001872:	e7f9      	b.n	8001868 <memset+0x4>

08001874 <_init>:
 8001874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001876:	bf00      	nop
 8001878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800187a:	bc08      	pop	{r3}
 800187c:	469e      	mov	lr, r3
 800187e:	4770      	bx	lr

08001880 <_fini>:
 8001880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001882:	bf00      	nop
 8001884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001886:	bc08      	pop	{r3}
 8001888:	469e      	mov	lr, r3
 800188a:	4770      	bx	lr
